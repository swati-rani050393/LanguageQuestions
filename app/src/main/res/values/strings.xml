<resources>
    <string name="app_name">LanguageInterviewQ</string>
    <string name="title_activity_log_in">LogInActivity</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>
    <string name="admob_inter_id">
        ca-app-pub-3844199791512298/4796060288</string>
    <string name="app_id"> ca-app-pub-3844199791512298~6668966030</string>


    <string name="don_t_have_an_account_signup">Do not have an account? Signup</string>
    <string name="login">Login</string>
    <string name="forgetpassword">ForgetPassword ?</string>
    <string name="enter_password">Enter Password</string>
    <string name="enter_email">Enter Email</string>
    <string name="login_title">Login</string>
    <string name="conformpassword">ConformPassword</string>
    <string name="signup">SignUp</string>
    <string name="already_have_an_account_login">Already have an account? Login</string>
    <string name="enter_password_sign">Enter Password</string>
    <string name="enter_email_sign">Enter Email</string>
    <string name="enter_username_sign">Enter Username</string>
    <string name="signup_title">Signup</string>
    <string name="difference_between_jdk_jre_and_jvm">Q5:What is the current version of JDK and difference between JDK JRE and JVM ?</string>
    <string name="oop_concept">Object oriented programming is a methodology to design a program using classes and objects.\n\tIn other words we can say that OOPs is a fundamental programming concept which developers use for binding the data and function together using the concept of classes and objects.\n\tThe main features of OOPs are given below:\n\t\t1) Encapsulation\n\t\t2) Inheritance\n\t\t3) Polymorphism\n\t\t4) Abstraction</string>
    <string name="q1_what_is_oops_and_what_are_the_main_features_of_oops">Q1:What is OOPs and what are the main features of OOPs?</string>
    <string name="q2_what_is_an_object_and_class">Q2:What is an object and Class ?</string>
    <string name="class_and_object"> CLASS:  Class is prototype that consist of object in different states and behaviour .\nIt has number of methods that are common the object present within that class.\nClass is a user -defined blueprint from which object are created. \nA class is a logical entity.\nA class does not take memory space when created. A class bind data and method together into a single unit.\n\nOBJECT: An object is a real world entity . \nDifferent objects have different states or attributes and behaviour. examples cars ,dog ,man etc. \nAn object is a real-world entity which is an instance of a class .\nAn object like a variable of the class and object is a physical entity .\nAn object take memory space when it is created.</string>
    <string name="q3_what_is_java">Q3:What is Java and Java programming language is named java why ?</string>
    <string name="Java_detail">Java is a programming language and a platform. Java is a high level, robust, object-oriented and secure programming language.\n Java was developed by James Gosling, who is known as the father of Java, in 1995. James Gosling and his team members started the project in the early \'90s.\n  Currently, Java is used in internet programming, mobile devices, games, e-business solutions, etc. Following are given significant points that describe the history of Java.\n\n 1) James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. The small team of sun engineers called Green Team.\n 2) Firstly, it was called "Green talk" by James Gosling, and the file extension was .gt.\n3) After that, it was called Oak and was developed as a part of the Green project.\nThe suggested words were "dynamic", "revolutionary", "Silk", "jolt", "DNA", etc. They wanted something that reflected the essence of the technology: revolutionary, dynamic, lively, cool, unique, and easy to spell, and fun to say.\n\t\tJava is an island in Indonesia where the first coffee was produced (called Java coffee). It is a kind of espresso bean.Java name was chosen by James Gosling while having a cup of coffee nearby his office.\n\t\tIn 1995, Time magazine called Java one of the Ten Best Products of 1995.\nJDK 1.0 was released on January 23, 1996. After the first release of Java, there have been many additional features added to the language. Now Java is being used in Windows applications, Web applications, enterprise applications, mobile applications, cards, etc. Each new version adds new features in Java.</string>
    <string name="features_of_java">Q4: What is the features of Java?</string>
    <string name="features_java_detail"> The features of Java are also known as Java buzzwords.A list of the most important features of the Java language is given below.\nSimple:\n\tJava is very easy to learn, and its syntax is simple, clean and easy to understand. According to Sun Microsystems, Java language is a simple programming language because:\n\t\t1)Java has removed many complicated and rarely-used features, for example, explicit pointers, operator overloading, etc.\n\t\t2)There is no need to remove unreferenced objects because there is an Automatic Garbage Collection in Java.\n\nObject_Oriented:\n\tJava is an object-oriented programming language.In Java everything is represented in the form of Object accept the primitive datatype.\n\nPlatform-Independent:\n\tJava is platform independent becauseJava code can be executed on multiple platforms, for example, Windows, Linux, Sun Solaris, Mac/OS, etc. Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms, i.e., Write Once and Run Anywhere (WORA).\n\nSecured:\n\tJava is best known for its security. With Java, we can develop virus-free systems. Java is secured because:\n\t\t1)No explicit pointer\n\t\t2)Java Programs run inside a virtual machine sandbox.\n\nRobust:\n\The English mining of Robust is strong.\n\t\t1)It uses strong memory management.\n\t\t2)There is a lack of pointers that avoids security problems.\n\t\t3)Java provides automatic garbage collection which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.\n\t\t4)There are exception handling and the type checking mechanism in Java. All these points make Java robust.
    \n\nPortable:\n\tJava is portable because it facilitates you to carry the Java bytecode to any platform. It does not require any implementation.\n\nHigh Performance:\n\tJava is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code. It is still a little bit slower than a compiled language (e.g., C++). Java is an interpreted language that is why it is slower than compiled languages, e.g., C, C++, etc.</string>
   <string name="jvm_jre_jdk"> The current version of JDK is JDK 21.JDK 21 reached General Availability on 19 September 2023.\n\tDifference between JRE,JDK and JVM :\nJVM:\n\tJVM(Java VirtualMachine) is not physically exits.Basically JVM is a part of JRE(Java Runtime Environment).JVM convert byte code to the machine language.\n\n\t1) JVM execute the java program line by line,Therefore it is also known as an interpreter.\n\t2) JVM comes with JIT(Just-In-Time) compiler that convert java source code into byte code.\n\t3) JVM has a class loader,runtime data area,execution engine and libraries.\nThe JVM performs the following main tasks:\n \t\tLoads code\n\t\tVerifies code\n\t\tExecutes code\n\t\tProvides runtime environment\n\nJRE:\n\tJRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment.It is the implementation of JVM.\n\nJDK:\n\tJDK is an acronym for Java Development Kit.JDK is a complete software for building Java application using java programming language.\n\tThe JDK contains a private Java Virtual Machine (JVM) and a few other resources such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc. to complete the development of a Java Application.</string>
   <string name="instance_local_static">INSTANCE VARIABLE:\nInstance variables are non-static variables and are defined in a class outside any methods.\nThese can be called by using the object of that class.\nAn instance variable is  a variable which has one copy per object .That means every object will have one copy of it.\nExample: Instance variable\n\tclass MyClass {\n\t\tint myVar;\n\t}\n\nLOCAL VARIABLE:\nLocal variables are variables defined within methods or blocks in a class. \nUnlike static or instance variables, local variables are not initialized by JVM with a default value. Hence, a local variable must be initialized before you try to use it.\nExample: Local variable\nclass MyClass {\n\tpublic int add{\n\t\tint a=4,b=6;\n\t\t return a+b;\n\t}\n\t}\n\nSTATIC VARIABLE:\nStatic variables ( class variables) uses the static keyword. Static variables ( class variables) are declared within a class and outside all methods\nExample: Static variable\n\tclass MyClass{\n\t\tstatic int myVar;\n\t} </string>
    <string name="what_is_instance_local">Q6:What is instance,local and static Variable?</string>
    <string name="java_interview_question">Java Interview Question</string>
    <string name="type_of_constructor_java">Q7:What is the Constructor and Type of Constructor?</string>
    <string name="constructor_detail_java">In java constructor is a special type of method which has the same name as class name and has no return type.\nIt is a special type of method which is used to initialize the object.\nEvery time an object is created using the new() keyword, at least one constructor is called.\nIt calls a default constructor if there is no constructor available in the class.\n\nThere are some rules defined for the constructor.\n\t1)Constructor name must be the same as its class name\n\t2)A Constructor must have no explicit return type\n\t3)A Java constructor cannot be abstract, static, final, and synchronized.\n\nThere are two types of constructors in Java:\n\t1)Default constructor (no-arg constructor)\n\t\tA constructor is called "Default Constructor" when it does not have any parameter.\nThe default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.\n\nSyntax of default constructor:\n\tclass_name(){}\n\n\t2)Parameterized constructor:\n\n\tA constructor which has a specific number of parameters is called a parameterized constructor.\nThe parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.\nSyntax of Parameterized constructor:\n\tclass_name(dataType var-name,dataType var-name ){}</string>
    <string name="q9_what_is_destructor">Q9:What is Destructor?</string>
    <string name="destructor_detail"> A destructor is a method that is automatically invoked when an object is destroyed.\n\tThe destructor also recovers the heap space that was allocated to the destroyed object, closes the files and database connections of the objects etc.</string>
    <string name="difference_between_function_and_constructor">Q10:What is the difference between function and constructor in java?</string>
    <string name="Method_and_constructor"> Difference between Function and Constructor are given below:\n\nFUNCTION :
    \n\tA method is a block of code or collection of statements or a set of code grouped together to perform a certain task or operation. It is used to achieve the reusability of code. We write a method once and use it many times.\nThe most important method in Java is the main() method.\nMethod Declaration:\n Method declaration has six components that are known as method header.Every method has a method signature. It is a part of the method declaration. It includes the method name and parameter list.\n\nAccess Specifier: \n\tAccess specifier or modifier is the access type of the method. It specifies the visibility of the method. Java provides four types of access specifier:\nPublic \nPrivate\nProtected\nDefault\n\nReturn Type:\n Return type is a data type that the method returns.If the method does not return anything, we use void keyword.\n\nMethod Name: \nIt is a unique name that is used to define the name of a method.A method is invoked by its name.\nParameter List: \nIt is the list of parameters separated by a comma and enclosed in the pair of parentheses. It contains the data type and variable name. If the method has no parameter, left the parentheses blank.\nMethod Body: \nIt is a part of the method declaration. It contains all the actions to be performed. It is enclosed within the pair of curly braces.\n\nCONSTRUCTOR :\n\t In java constructor is a special type of method which has the same name as class name and has no return type.\nIt is a special type of method which is used to initialize the object.\nEvery time an object is created using the new() keyword, at least one constructor is called.\nIt calls a default constructor if there is no constructor available in the class.There are two types of constructors in Java:\n\t1)Default constructor (no-arg constructor)\n\t A constructor is called "Default Constructor" when it does not have any parameter.\nThe default constructor is used to provide the default values to the object.\n\n2)Parameterized constructor:\n\t A constructor which has a specific number of parameters is called a parameterized constructor.\nThe parameterized constructor is used to provide different values to distinct objects.</string>
    <string name="variable_detail">Variable are just name given to a memory location.A variable is assigned with a data type.There are three types of variables in java: local, instance and static.\n\t1) It is a combination of "vary + able" which means its value can be changed.\n\t2) It should start with a lowercase letter such as id,name etc.</string>
    <string name="variable_declaration_detail"> Creating any variable is known as variable declaration.\nSyntax:\n\tdatatype var_name;</string>
    <string name="variable_initialization_detail">Assigning a value of a variable is known as variable initialization.\nSyntax:\n\tdatatype var-name= value; </string>
     <string name="copy_constructor_detail"> Copy constructor is used to create the duplicate copy of some existence object. \nIt work like a photo state machine.</string>
     <string name="support_to_pointer_not">The pointer is a variable that refers to the memory address.\n\tMajor factor is security concerns. Due to pointers most of the users consider C- language very confusing and complex so it is a reason that Java does not support the pointers .</string>
    <string name="not_pure_object_oriented"> No ,Java is not pure object oriented programming language because Java support primitive data type such as int, byte, long etc to be used , which are not objects.\n\n\tYes, Java provide wrapper classes for int bite long etc but still int, float, long etc are not classes.</string>
     <string name="this_detail">This keyword is used to represent current class object .\nWe can use it in several places\n\t1) It can be used to refer to the instance variable of the current class .\n\t2) It can be used to make initiate current class constructor .\n\t3) It can be passed as an argument the method call.\n\t4)  It can be passed as an argument in constructor call.\n\t5) It can be used to make a current class method .\n\t6) It can be used to return the current class instance. </string>
    <string name="inheritance_detail"> Inheritance is a basic concept of object oriented programming language. Inheritance is a process to achieve a reusability among the object. \nIt is also use to achieve dynamic binding.With the help of inheritance concept we can inherit the data member and the member function of the parent class into a child class with the help of extends keywords.\nThe real life example of inheritance is child and parents, all the properties of father are inherited by his son.</string>
     <string name="type_of_inheritance"> There are 5 type of inheritance.
\n\t1) Single inheritance :\n\t\tIn single inheritance there exists single base class and single derived class.When a class inherits another class, it is known as a single inheritance. In the example given below, Dog class inherits the Animal class, so there is the single inheritance.\nSyntax:\n\tclass Animal{\n}\nclass Dog extends Animal{\n}\n\n\t2) Multi level inheritance:\n\t\tWhen there is a chain of inheritance, it is known as multilevel inheritance. As you can see in the example given below, BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.\n In other word we can say Multilevel inheritance is a process where a class inherit another class which is a child class of another parent class.\n\n\t3) Hierarchical inheritance:\n\t When two or more classes inherits a single class, it is known as hierarchical inheritance. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.\n\n\t4) Hybrid inheritance:\n\tHybrid inheritance is a combination of hierarchical inheritance and multiple inheritance.so it is not supported in java through class.\n\n\t5) Multiple inheritance:\n\twhen a class inherits more than one class ,it is known as multiple inheritance.\nTo reduce the complexity and simplify the language, multiple inheritance is not supported in java.\n\nConsider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.\nSince compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.</string>
  <string name="child_parent_class"> CHILD CLASS:\nA class that inherits the data members and member function of another class is called child class.\n\nPARENT CLASS:\nA class whose properties are inherited  by child class is known as parent class (base class, super class).</string>
   <string name="support_no_multiple" >The diamond problem in Java is the main reason  so java does not support multiple inheritances in classes.Multiple inheritances lead to ambiguity.\n\tFor example, if there is a class named Sub and there are two classes Super1 and Super2 and if both contains a method named sample().And if the class sub inherits both classes Super1 and Super2 then there will be two copies of the sampling method one from each superclass and it is ambiguous to decide which method to be executed.</string>
   <string name="datatype_detail"> Data type defined  the two things of data, type of data and size of data.\nThere are two type of data type in Java .\n1) Primitive data type:-\n\tPrimitive data type are also known inbuilt data type or predefined data type.Like int, short,byte,long, character float etc are primitive data type.\n\n2) Non- primitive data type:-\n\tNon  primitive data type are also known user defined or referenced data type.Array, class ,Enum, interface, reference variables etc are non primitive data type</string>
   <string name="polymorphism_detail"> Whenever an object give a different-different behaviour in a different-different circumstances or condition than this behaviour of an object is known as polymorphism . Polymorphism is always achieved by the behaviour of an object.for example add operator, AC ,actors etc\nThere are two type of polymorphism\n\n1)Compile Time Polymorphism:-\n\tWhenever an object is bound with their functionality at compile time this is known as compile time polymorphism.\n\n2) Runtime polymorphism:-\n\tWhenever an object bound with their functionalities at run time this is known as runtime polymorphism.</string>
  <string name="method_overloading_and_method_overriding">METHOD OVERLOADING: \n\tMethod overloading says you can have more than one function with the same name in our class having a different prototype. We can achieve function overloading only by changing in arguments.\nAccess modifier does not play any role in case of function overloading.Method overloading increases the readability of the program.\nMETHOD OVERRIDING:-\n\tIf subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.\nIn other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.\nA real example of Java Method Overriding\n\tConsider a scenario where Bank is a class that provides functionality to get the rate of interest. However, the rate of interest varies according to banks. For example, SBI, ICICI and AXIS banks could provide 8%, 7%, and 9% rate of interest. </string>
  <string name="type_of_method_overloading">We can achieve function overloading by two types:\n1) we can achieve function overloading by change the total number of argument in each functions.\n\n2) We can achieve function overloading by  change the data type of their arguments </string>
  <string name="encapsulation_detail"> Encapsulation is a basic concept of oops .With the help of encapsulation we can bind  the data member and member function into a single units.</string>
 <string name="achieve_abstraction">Abstractions is a basic concept of object oriented programming language .Abstraction is process of hiding the implementation from the user only show the functionality .
 In abstraction you focus on what the object does instead of how it does it. Abstraction can be achieved by with the help of abstract class or interfaces. </string>
<string name="create_instance_or_not"> No  we cannot create an instance of an abstract class. Abstract class cannot be instance shifted.</string>
    <string name="virtual_function"> Virtual functions are those functions that are present in the parent class and overridden by the subclass. These function are used to achieve runtime polymorphism.</string>
    <string name="difference_between_static_and_dynamic"> There are the difference between static binding and dynamic binding.\nStatic binding:-\n\tStatic binding in Java occur during compile time. Private final and static method and variable uses static binding and bonded by compiler .Static binding uses type (class in Java) information for binding.\n\nDynamic binding:-\n\t Dynamic binding occur during runtime.Virtual method are bonded during run time based upon run time object. dynamic binding uses object to resolve binding</string>
<string name="final_finally_finalize"> There are difference between final, finally and finalize.\nFinal:-\n\t Final is the keyword and access modifier which is used to show the accessibility of a class, method or variable.\n1)  If you make any class final that mean that class cannot be inherited.\n2) if you make any function of a class as a final that mean that cannot be overridden.\n3) if you make any local variable as a final that it will become constant that means the value of that variable cannot be change throw out of the functions.\n\nFinally:-\n\tFinally is a block in Java exception handling to execute the important code whether the exception occur or not. It executions is not depend on the exception.\n\nFinalize:-\n\t Finalize is the method in java which is used to perform clean up processing just before object is garbage collected.It performs memory management tasks. Finalize method is executed just before the object is destroyed.</string>
<string name="interface_detail">Interface are the blueprint of a class.Interface are the medium between a Java program and concept of Java programming language. Interface are one of the way to achieve 100%  abstractions.\n\t1) If you want to give the body of any instance method in an interface then you have to declare that method with the keyword default and you can use default only in interfaces.\n\t2) By default all the data member of an interface are final and static also it means interfaces are not represent an object. </string>
<string name="exception_detail"> Exception is an unexpected event which occur during the executions of a program that disrupts  the normal flow of the program instructions.Exception  are the abnormal condition that can be handle by the handler. Exception are classified as checked and unchecked exceptions. \nIt belongs to Java.lang.Exception.\nIt can occur at run time and compile time both.</string>
<string name="difference_in_Error_and_exception">Difference between Error and exceptions:-
\nERROR:-\n\t Error are usually caused by serious problems that are outside the control of the program .Error are represented by the error class .Error are classified as an unchecked type it belongs to the java. lang.Error. It cannot be occur at compile time. for example outOfMemory, IO error.\n\nEXCEPTION:Exception is an unexpected event which occur during the executions of a program that disrupts  the normal flow of the program instructions.Exception  are the abnormal condition that can be handle by the handler. Exception are classified as checked and unchecked exceptions. \nIt belongs to Java.lang.Exception.\nIt can occur at run time and compile time both. </string>
<string name="difference_in_checked_and_unchecked">Difference between checked and unchecked exceptions Checked exception:-
     \nCHECKED EXCEPTION:\n\tCheck exception are the exception that are check at compile time .There are two type of Checked exception.\n\t1) Fully checked exception:-\n\t\t If fully chat exception are the checked exception where all its child classes are checked like IO exception and interrupted exception.\n\n\t2)Partially checked exception:-\n\t\t Partially Checked exception is a checked exception where some of its child classes are unchecked like Exception class.\n\nUNCHECKED EXCEPTION:-\n\tAll those exception that are not checked at compile time is known as unchecked exceptions. In Java, exception under Errors and Runtime exception classes are unchecked exceptions for example arithmetic exception. </string>
   <string name="body_of_interface" > Yes, we can create normal function in a java interface. If you want to give the body of any instance method in a interface then you have to declare that method with the keyword default and you can use default only in interfaces.</string>
<string name="init_block_detail">INIT BLOCK:\n\tInit block is a block of code  which is always executed before the any constructor,so for init block it is necessary there will be a constructor.If you want to perform some common task to each constructor of your class then put the code of that task into an init block. You can have more than one init block in a single class and they are executed in a order in which they are defined in a class.\n\nStatic block:-\n\tStatic block is used to initialise the static data member dynamically. Static block is always executed at class loading time that mean before the execution of main function. Static block executed only once in a life cycle of a class. Any task which you want to perform only once in the life cycle of a class then also use static block. </string>
<string name="super_keyword_detail">Super keyword in java is a reference variable that is used to refer parent class object. Super is an implicit keyword create by JVM and supply each and every java program for performing important role in three places.\n     Usage of Java super Keyword:-\n1) super can be used to refer immediate parent class instance variable.\n2) super can be used to invoke immediate parent class method.\n3) super() can be used to invoke immediate parent class constructor. </string>
<string name="collection_and_collections">Difference between collection and collections:-\nCOLLECTION:-\n\tCollection is the interface where you can group objects into a single units .Collection does not have all static method .Collection consist some sub -interfaces such as list,set and queue.\n\nCOLLECTIONS:-\n\tCollections is a utility class that has some set of operation which you can perform on collection. Collections have all method are static method .Collections consist of static method such as sort , reverse etc. </string>
<string name="package_detail"> Package are collection of similar type of classes and interfaces. No class exist without any package in Java. import statement is used to link one package at a time. All import statement must be written about the class keyword.Lang Package is import to each Java file by the compiler ,because all classes are general purpose so this package is implicitly import by compiler.</string>
<string name="garbage_collector"> Garbage collection is an implementation of automatic memory management .The garbage collector free app space occupied by object that are no longer existence.</string>
<string name="difference_in_array_and_arraylist"> Difference between array and array list:-\nARRAY:-\n\tThe array is of fixed size means be cannot resize the array as per need.\n\tArray are of the static type.\n\tArray can store primitive data type as well as objects.\nARRAYLIST :-\n\tArraylist is not of the fixed size, means we can change the size dynamically. \n\tArraylist is of dynamic  type.\n\t Arraylist cannot Store the primitive data type it can only store the objects.</string>
<string name="access_modifier">Access modifier are keywords that determines the accessibility of method,class,variable in OOPs. \nThere are two types of modifiers in Java: access modifiers and non-access modifiers.\n\nThere are four types of Java access modifiers:\n1)Private: \n\tThe access level of a private modifier is only within the class. It cannot be accessed from outside the class.\n2)Default: \n\tThe access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.\n3)Protected: \n\tThe access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.\n4)Public:\n\t The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package. </string>
<string name="array_detail"> An array is a collection of similar type of elements which has contiguous memory location.\n\tJava array is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.\nAdvantage of array:-\nThere are some advantage of array.\n1)Code Optimization: It makes the code optimized, we can retrieve or sort the data efficiently.\n2)Random access: We can get any data located at an index position.\n\nThere are two types of array.\n\t1)Single Dimensional Array\n\t2)Multidimensional Array.</string>
<string name="parent_class_of_java">Object class is the parent class of every class in Java. </string>
<string name="factory_method"> A factory method is one whose return type is similar to the class name in which class is present. The purpose of factory method is to create an object without using new operator.\nRules for writing factory method\n1) The return type of the factory method must be similar to class name in which class it presents.\n2) Every factory method in java is static.\n3) The access specifier of the factory method must be public.</string>
<string name="difference_between_string_stringBuffer"> Difference between string, stringBuffer and stringBuilder:-
\n STRING:-\n\t string is  immutable or non changeable.\n String is not synchronised that is thread safety are not used .\nIt use string pool to store elements. We cannot use append keyword in string because it is fixed.\n STRING BUFFER:-\n\t String buffer is mutable string buffer is synchronised that is thread safe sting buffer .\nIt less efficient than sting builder it uses heap to store the elements.\nWe can use append keyword to append string in stringBuffer.\n\nSTRINGBUILDER:-\n\t stringBuilder is also mutual class .\n StringBuilder is non synchronised that is not  thread safe .\n StringBuilder is more efficient than sting buffer .It also use heap to store the values .We can use append keyword to a pen string in stringBuilder.</string>
<string name="System_out_println_detail">system.out.println is used to print the output where system is a class and out is a static data member of a system class and reference variable of print stream class and println  is a function of steam class.</string>
 <string name="public_void_main_detail" >The public static void main(String[] args) method plays a crucial role in Java programming. \nIt serves as the entry point for any Java program and is the first method that gets executed when a Java application starts.</string>
<string name="difference_abstract_and_interface">ABSTRACT CLASS: \n\t1) Abstract class can have abstract and non-abstract methods.\n2) Abstract class does not support multiple inheritance.\n3) Abstract class can have final, non-final, static and non-static variables.\n4) Abstract class can provide the implementation of interface.\n5) The abstract keyword is used to declare abstract class.\n6) An abstract class can extend another Java class and implement multiple Java interfaces.\n7) An abstract class can be extended using keyword "extends".\n8) A Java abstract class can have class members like private, protected, etc.\n9)Example:\n\tpublic abstract class Shape{\n\t\tpublic abstract void draw();\n\t}\n\nINTERFACE:\n\tInterface can have only abstract methods. Since Java 8, it can have default and static methods also.\n2) Interface supports multiple inheritance.\n3) Interface has only static and final variables.\n4) Interface can not provide the implementation of abstract class.\n5) The interface keyword is used to declare interface.\n6) An interface can extend another Java interface only.\n7) An interface can be implemented using keyword "implements".\n8) Members of a Java interface are public by default.\n9) Example:\n\tpublic interface Drawable{\n\t\tvoid draw();\n\t} </string>
<string name="map_set_interface"> Map interface:-\n\tA map( java.util.Map) represent a key value pair  storage of element .Map interface does not implement the collection interface. It can only contain a unique key but can have duplicate elements .There are two interfaces which implement map in Java that are Map interface and sorted Map.\n\nSET:-\n\tSet ( java.util.Set) interface is a collection which  cannot contain duplicate elements. It contain only unique element and not follow any order.</string>
<string name="type_of_java_class">There are 7 type of classes in Java:-\n1)STATIC CLASS:-\n\tWe can make a class static if and only if it is a nested class . Nested class does not need the reference to the outer class .Static class has only static members .It can not access the member of the outer class .We can not create an object of the static class.
\n\nFINAL CLASS:-\n\t A class with final keyword is called the final class. The purpose of the final class is to make the class immutable like string class .If a class is final then we cannot override that class.\n\nABSTRACT CLASS:-\n\tA class with abstract keyword is called a abstract class . Abstract class may or may not contain a abstract method .We can not create the object of abstract class but we can create the object of subclass.\n\nCONCRETE CLASS:-\n\tThese are the regular Java classes .A derived class that provide the basic implementation for all of the method that are not already implemented in the base class.
    \n\nSINGLETON CLASS:-\n\tA class that has only an object at a time is known as singleton class. If we are trying to create an instance of object second time that newly created instance points to the first instance.\n\nPOJO CLASS:-\n\t In Java POJO stand for plane old Java objects. A java class that contain only private variables ,setter and getter is known as POJO class.\n\nINNER CLASS:-\n\tIn Java a class within a class or known as NASDAQ class the outer class member can be accessed by the inner class.\nClass which are nested class but not static is called non- static nested class or inner classes. </string>

    <string name="copy_constructor">Q11:What is a copy constructor?</string>
    <string name="java_does_not_support_to_pointers">Q12:Why Java does not support to pointers?</string>
    <string name="java_a_object_oriented_programming_language">Q13:Is Java a Object-Oriented-Programming language or not if not.Please give the reason?</string>
    <string name="variable_variable_declaration_and_variable_initialization">Q14:What is variable,variable declaration and variable initialization?</string>
    <string name="what_is_this_keyword">Q15:What is this keyword and where we can use it?</string>
    <string name="what_is_data_type">Q16: What is data type and how many type of data type in java?</string>
    <string name="what_is_inheritance">Q17:What is inheritance and give real life example of inheritance?</string>
    <string name="types_of_inheritance_in_java">Q18:How many types of inheritance in java?</string>
    <string name="child_sub_class_and_parent_super_class">Q19: What is a child(sub)class and Parent(super)class?</string>
    <string name="why_java_does_not_support_multiple_inheritance">Q20:Why java does not support multiple inheritance in case of class in java?</string>
    <string name="variable_title">Variable</string>
    <string name="variable_declaration_title">Variable declaration</string>
    <string name="variable_initialization_title">Variable Initialization</string>
    <string name="what_is_data_type_and_type">Q16: What is data type and how many type of data type in java?</string>
    <string name="type_of_polymorphism_in_java">Q21:What is polymorphism and how many ,type of polymorphism in java?</string>
    <string name="q22_what_is_method_overloading_and_method_overriding">Q22:What is method overloading and method overriding?</string>
    <string name="how_many_type_achieve_function_overloading">Q23:How many type we can achieve function overloading?</string>
    <string name="q24_what_is_encapsulation">Q24:What is Encapsulation?</string>
    <string name="what_is_abstraction_and_how">Q25:What is abstraction and how to achieve data abstraction?</string>
    <string name="can_you_create_an_instance_of_an_abstract_class">Q26:Can you create an instance of an abstract class?</string>
    <string name="q27_what_is_virtual_function">Q27:What is virtual function?</string>
    <string name="difference_between_static_binding_and_dynamic_binding">Q28:Difference between static binding and dynamic binding?</string>
    <string name="between_final_finally_and_finalize">Q29:What is the difference between final, finally and finalize()?</string>
    <string name="q30_what_is_interface">Q30:What is Interface?</string>
    <string name="q31_what_is_exception">Q31:What is Exception?</string>
    <string name="difference_between_error_and_exception">Q32:What is the difference between Error and Exception?</string>
    <string name="difference_between_checked_and_unchecked_exception">Q33:What is the difference between checked and unchecked exception?</string>
    <string name="difference_between_string_stringbuffer_and_stringbuilder">Q34:What is the difference between string,stringBuffer and stringBuilder?</string>
    <string name="body_in_a_java_interface_and_how_we_can">Q35:Can we can create normal function (with body) in a java interface and how we can?</string>
    <string name="q36_what_is_init_block_and_static_block">Q36:What is init block and static block ?</string>
    <string name="super_keyword_and_use_of_super_keyword">Q37:What is super keyword and use of super keyword?</string>
    <string name="difference_between_collection_and_collections">Q38:Difference between Collection and Collections?</string>
    <string name="what_is_package">Q39:What is Package?</string>
    <string name="what_is_access_modifier">Q40:What is access modifier?</string>
    <string name="difference_between_abstract_class_and_interface">Q41:What is the difference between abstract class and interface?</string>
    <string name="what_is_garbage_collection_gc">Q42:What is Garbage collection(GC)?</string>
    <string name="what_is_an_array">Q43:What is an Array?</string>
    <string name="difference_between_array_and_arraylist">Q44:What is the difference between Array and Arraylist?</string>
    <string name="map_and_set_in_collection">Q45:What is map and set in collection?</string>
    <string name="parent_class_of_every_java_class">Q46:What is the parent class of every java class?</string>
    <string name="write_public_static_void_main_string_args_in_every_java_program">Q47:Why we write public static void main (String[] args) in every java program?</string>
    <string name="describe_system_out_println">Q48:Describe System.out.println()?</string>
    <string name="how_many_type_of_classes_are_present_in_java">Q49:How many type of classes are present in java?</string>
    <string name="what_is_factory_method_in_java">Q50: What is Factory method in java?</string>
    <string name="android_interview_questions">Android Interview Questions</string>
    <string name="what_is_android">Q1:What is Android and who are the founder of android?</string>
    <string name="what_is_the_first_android_device">Q2:What is the first Android device name and version?</string>
    <string name="what_is_the_current_version_of_android">Q3:What is the current version of Android and Android studio?</string>
    <string name="what_is_gradle_in_android_studio">Q4:What is Gradle in Android studio?</string>
    <string name="what_is_a_fragment">Q43:What is a fragment and lifecycle of fragment?</string>
    <string name="what_is_an_apk_file_format">Q42:What is an APK file format?</string>
    <string name="debugging_process">Q41:What is debugging process?</string>
    <string name="what_is_an_event">Q40:What is an event?</string>
    <string name="_how_many_dialog_boxes_do_support_in_android">Q39:How many dialog boxes do support in android?</string>
    <string name="what_are_the_measures_you_can_take_to_avoid_anr">Q38:What is ANR in Android?What are the measures you can take to avoid ANR?</string>
    <string name="what_is_animation_and_type_of_animation">Q37:What is Animation and type of animation?</string>
    <string name="what_is_a_singleton_class_in_android">Q36:What is a singleton class in Android?</string>
    <string name="what_is_ndk">Q35:What is NDK?</string>
    <string name="how_to_call_another_activity_in_android">Q34:How to call another activity in android?</string>
    <string name="what_is_constraint">Q33:What is constraint and co-ordinator layout in android?</string>
    <string name="difference_between_relative_and_linear_layout">Q32:What is the difference between Relative and Linear layout in android?</string>
   <string name="mvvm_in_android">Model — View — ViewModel (MVVM) is the industry-recognized software architecture pattern that overcomes all drawbacks of MVP and MVC design patterns. MVVM suggests separating the data presentation logic(Views or UI) from the core business logic part of the application.\nThe separate code layers of MVVM are:\n\nModel: \n\tThis layer is responsible for the abstraction of the data sources. Model and ViewModel work together to get and save the data.\n\nView: \n\tThe purpose of this layer is to inform the ViewModel about the users action. This layer observes the ViewModel and does not contain any kind of application logic.\n\nViewModel: \n\tIt exposes those data streams which are relevant to the View. Moreover, it serves as a link between the Model and the View.</string>
    <string name="alert_status_and_toast_notification_in_android">Q30:What is the difference between Alert,status and Toast notification in android?</string>
    <string name="type_of_notification_in_android">Q29:What is notification and type of notification in android?</string>
    <string name="what_is_volley_and_retrofit">Q28:What is volley and retrofit?</string>
    <string name="what_is_json_in_android">Q27:What is JSON in android and type of JSON in android?</string>
    <string name="restful_and_soap_web_services">Q26:What is the difference between Restful and SOAP web services?</string>
    <string name="what_is_web_service_in_android">Q25:What is Web service in Android?</string>
    <string name="difference_between_recycler_view_and_listview">Q24:What is the difference between Recycler view and ListView in android?</string>
    <string name="what_is_material_designing_in_android">Q23:What is Material designing in android?</string>
    <string name="describe_the_component_of_room_database">Q22:Describe the component of Room database?</string>
    <string name="what_is_room_database_in_android">Q21:What is Room database in android and difference between room database and SQLITE database in android?</string>

    <string name="what_is_sqlite_database_in_android">Q19:What is SQLITE Database in Android and how to create Database in Android?</string>
    <string name="what_is_shared_preference_and_how_to_save_and">Q18:What is shared Preference and how to save and retrieve data from shared preference?</string>
    <string name="how_many_type_of_storage_technique_in_android">Q17:How many type of storage technique in Android?</string>
    <string name="difference_between_service_and_intentservice">Q16:What is the difference between Service and IntentService?</string>
    <string name="what_is_service_and_lifecycle_of_service">Q15:What is Service and lifeCycle of service?</string>
    <string name="what_is_menu_and_type_of_menu_in_android">Q14:What is menu and type of menu in android?</string>
    <string name="difference_between_implicit_ant_explicit_intent">Q13:What is the difference between implicit ant explicit Intent in Android?</string>
    <string name="what_is_intent_in_android">Q12:What is Intent in Android?</string>
    <string name="describe_activity_and_its_lifecycle">Q11:Describe Activity and its lifecycle?</string>
    <string name="how_many_basic_components_in_android">Q10:How many basic components in Android?</string>
    <string name="what_is_layout_in_android">Q9:What is Layout in Android and how many types of Layout?</string>
    <string name="what_is_view_in_android">Q8:What is view in Android?</string>
    <string name="what_is_dvm">Q7:What is DVM?</string>
    <string name="what_is_adb">Q6:What is ADB?</string>
    <string name="what_is_manifest">Q5:What is Manifest and uses of Manifest file in Android?</string>
    <string name="bundle_in_android">Bundles are used to pass the required data between various Android activities. These are like HashMap that can take trivial data types. Below code shows how to transfer a piece of data by using bundle:\n\tBundle b=new Bundle();\n\tb.putString("Email","abc@xyz.com");\n\ti.putExtras(b); // where i is intent </string>
    <string name="wifi_android">Portable Wi-Fi Hotspot permits you to share your mobile internet connection with other wireless devices. For example, using your Android phone as a Wi-Fi hotspot, you can use your laptop to connect to the internet using that access point. </string>
     <string name="ddms_detail">DDMS(Dalvik Debug Monitor Server) is a debugging tool in the Android platform. It gives the following list of debugging features:\n\t1)Port forwarding services.\n\t2)Thread and heap information.\n\t3)Logcat.\n\t4)Screen capture on the device.\n\t5)Network traffic tracking.\n\t6)Incoming call and SMS spoofing.\n\t7)Location data spoofing. </string>
     <string name="context_detail">The context in Android is the context of the current state of the application or object. The context comes with services like giving access to databases and preferences, resolving resources, and more.
         \n are two types of context. They are:\n\n1)Activity context:\n\tThis activity context is attached to the lifecycle of an activity.The activity context can be used when you are passing the context in the scope of an activity or you need the context whose lifecycle is attached to the context of the activity.\n\nApplication context:\n\tThis application context is attached to the lifecycle of an application.The application context should be used where you need a context whose lifecycle is separate from the current context or when you are passing a context beyond the scope of activity. </string>
    <string name="adapter_detail"> An adapter in Android acts as a bridge between an AdapterView and the underlying data for that view. The adapter holds the data and sends the data to the adapter view, the view can take the data from the adapter view and shows the data on different views like a spinner, list view, grid view, etc.</string>
    <string name="broadcast_receiver_detail">Broadcast in android is the system-wide event that can occur when the device starts, when a message is received on the device, when incoming calls are received, or when a device goes to airplane mode, etc. Broadcast Receivers are used to respond to these system-wide events. Broadcast Receivers allow us to register for the system and application events, and when that event happens, then the registered receivers get notified. There are mainly two types of Broadcast Receivers:\n\nStatic Broadcast Receivers: \n\tThese types of Receivers are declared in the manifest file and work even if the app is closed.\n\nDynamic Broadcast Receivers:\n\t These types of receivers work only if the app is active or minimized.</string>
<string name="call_another_activity">With the help of Intent class we can call another activity in android.like:\nIntent intent = new Intent(CurrentActivity.this, OtherActivity.class);\n\tCurrentActivity.this.startActivity(intent);</string>
<string name="dialog_in_android">A dialog is a small window that prompts the user to make a decision or enter additional information. A dialog does not fill the screen and is normally used for modal events that require users to take an action before they can proceed.The Dialog class is the base class for dialogs, but do not instantiate Dialog directly. Instead, use one of the following subclasses:
    \nAlertDialog:\n\tA dialog that can show a title, up to three buttons, a list of selectable items, or a custom layout.\nDatePickerDialog or TimePickerDialog:\n\tA dialog with a predefined UI that lets the user select a date or time.\nProgress Dialog:\n\tIt alert/satisfaction/notify about the timing which our application takes.We can not handle the time duration of progress dialog.</string>



    <string name="android_and_founder">An android is an open-source and Linux-based operating system.\nAn operating system is a software program that enables the hardware to communicate and operate with the software.\n Andy Rubin is the founder of android.</string>
    <string name="first_version_android">The first ever Android 1.0 version was released on September 23 2008. It has no visit no material design and no support either for on-screen buttons or keywords. \nThe first commercially available Android device was HTC dream. </string>
    <string name="current_version">Android 14 is the latest version of Android, and it was released on October 4, 2023. It arrived first on Google Pixel phones but was also quickly rolled out to Samsung Galaxy devices as a beta. Phones from OnePlus, Xiaomi, Nokia, and others will eventually follow as well.\nAndroid Studio Jellyfish | 2023.3.1 Canary 1 is now available in the Canary channel. </string>
    <string name="gradle_detail"> Gradle is a build automation tool known for its flexibility to build software. \n\tA build automation tool is used to automate the creation of application. The building process include compiling, linking and packaging the code .\nGradle provide building testing and deploying software on several platforms.</string>
    <string name="manifest_file_detail"> The manifest file provide essential information about your application to the Android operating system and Google Play Store.
       Manifest file contains information of your package, including component of Android applications such as activity ,services, broadcast receivers and content provider etc.</string>
   <string name="adb_detail">ADB stand for Android Debug Bridge. It is used to communicate with the emulator instance.</string>
   <string name="dvm_detail">DVM is refer to dalvik virtual machine. It is same as Java virtual Machine in Java. \nThe Java compiler Javac  converts the Java source code into java byte code (. class). Then dex compiler convert this (.class) file into a dalvik byte code (.dex) file.</string>
   <string name="view_detail">Basic building block for user interface is called view. View is created from the view class .View occupy a rectangle area on the screen. View is responsible for drawing and event handling. View is the base class for widgets which are used to create interactive UI component like button ,text field etc. </string>
   <string name="layout_detail"> Layout are sab classes of View Group class .layout define the visual structure of your applications .Layout are also called view containers .A layout may contain any type of views such as button, label, text field, image etc.\nThere are five type of layout:-\n\t1) Linear layout\n\t2)Relative layout\n\t3)Frame layout\n\t4)Table layout\n\t5)Constraint layout</string>
   <string name="basic_component_of_android">There are four basic component in Android.\n1) Activity :\n\tAn activity is the screen representation of  an application in Android. It serves as an entry point for the user interactions. Activity has a layout file where you can place your UI .An application can have different -different activities.\n\n2)Services :\n\tServices are used to perform the background task.\n\n3)Content provider :\n\tContent provider is used to share the data between the applications.\n\n4)Broadcast receiver:\n\tIt simply respond to broadcast message from other application or from the system.It is used for making a communication between android app to OS.It has no lifecycle and it has no UI.
       basically it perform the os related task means network information and power management information. </string>
  <string name="activity_lifecycle"> An activity is the  screen representation of an application in Android. It serves as entry point for the user interaction.Activity has a layout where you can place your UI.\nLifeCycle method of an activity:\n\t1) onCreate() :-\n\t\tThis method is called when the activity is created.\n\t2) onStart() :-
      \n\t\tThis method is called when the activity become visible to the user.\n\t3) onResume() :-\n\t\t When this method is called the activity is  foreground and the user can interact with it.\n\t4) onPause ():-\n\t\tActivity is partially hide by another activity when this method is called.\n\t5) onStop() :-\n\t\tActivity is completely hidden and not visible to the user when this method is called.\n\t6) onDestroy() :-\n\t\tActivity is destroyed and remove from the memory and this method is called.</string>
  <string name="intent_detail">An intent is a kind of message or information that is passed to the component. It is used to launch an activity ,display a web page, send message etc.\n\tThere are two type of intent \n\t\t1) Implicit intent\n\t\t2) Explicit intent </string>
   <string name="difference_in_intent">Difference between implicit intent and explicit intent:-\nImplicit intent:-\n\tThe implicit intent is used to invoke the system components.\nExplicit intent:-\n\tAn explicit intent is used to invoke the activity class. </string>
   <string name="service_and_IntentService"> Difference between services and intent services:-\nSERVICES:-\n\t1) If the background task is not performed for a long time we can use service.\n\t2) We use be used the method onStartService()  to start the service.\n\t3) Service  will always run on the main thread.\n\t4) To stop service we have to use stopService ()or stopSelf() .\n\t5) Easy to interact with the UI of the application.\nINTENT SERVICE:-\n\t1) if the background task is perform for a long time we can use  intent service.\n\t2) We use the method context.startService()  to start the intent service.\n\t3) intent service always runs on the workers thread.\n\t4) No need to stop the service it will stop automatically.\n\t5) Difficult to interact with the UI of the application.</string>
   <string name="material_designing">Material designing is a comprehensive guide for visual, motion and interaction design across platform and devices. </string>
   <string name="recyclerview_and_listView"> Difference between recyclerView and listview:\nRecycler view:-\n\t1) The recyclerView adaptor forces us to use the viewHolder pattern. The views are split into onCreateViewHolder()   and onBindViewHolder() method.\n\t2) Efficient scrolling ,we can choose the way of scroll like vertical horizontal and grids.\n\t3) RecyclerView used less memory.\n\t4) Dividers between items are not shown by default.\nList view:-\n\t1) in efficient scrolling we can only create vertical scrolling.\n\t2) listView used more memory for a long list.\n\t3) Dividers between items are shown by default.</string>
   <string name="menu_detail">In  Android Menu is Concept which is used for handling different -different types of run time operation .\nThere are a basically three types of Menu.\n\t1) Option Menu\n\t2) Popup Menu\n\t3) Context or Contextual Menu\n\n1) Option Menu  :\n\t it is Menu in our Android Application Development.Which is used for handle run time operation on Action bar or Toolbar.It appears with three vertical dot at top right corner of Action bar or toolbar like whatsapp  etc.\n\n2) Context Menu:\n\tIt is also menu in our android application  Development. which is used for a note book type app or personal note type app which appears on the long press of any view .It show same menu options for every data.\n\n 3)Pop Up Menu —>\n\tIt is also type of Menu In our Android Application  Development.which appears on the click of any view .Mostly it is used in gaming app.</string>
   <string name="services_detail">Service is a Basic Component of Android Application Development .Service used for performing long running task in a background without user interruption. it is no UI and it has its own lifecycle.\nIn a Android there are a basically two types of Services,\n\t1) Started Service\n\t2) Bounded Service
       \n1) Started Service :\n\tA Service is started when  an application component such as Activity starting a service by calling startService().it is Running in Background continuously Until the Service is Stopped forcefully or Manually.\n2) Bounded Service :\n\tA Service  is Bounded with Another Application Component like Activity by calling onBind() and Unbind these Service by calling onUnbind() and when we want to again rebind these Service with application component then call onRebind().</string>

    <string name="storage_detail">Storage is a techniques in android which is used for storing our android application data in android device from the different - different way.\n\t1) Internal Storage \n\t2) External Storage\n\t3) Shared Preferences\n\t4) SQLITE Database\n\n1) Internal Storage :\n\tInternal Storage is a Storage techniques in our android application dev.
which is used for storing our android application data in android device internal storage.\nMostly it is used for storing private primitive data in our device.\n\n2) External Storage :\n\tExternal Storage is a Storage techniques in our android application dev.which is used for storing our android application data in android device External storage.\nMostly it is used for storing public data in our device.\n\n3) Shared Preferences :\n\tIt is also storage techniques in our android application dev.which is used for storing secure and small amount of data in the form of key and value pair.\nIt is used for session management or page tracking .\nIt is used for performing operation on authenticate data.\nMostly Shared Preference is used for Login , SignUp purpose.\n\n4) SQLITE database:\n\tIt is also type of storage that is used for the storing public relational data in a "SQLITE Database" .\n For preforming operation on SQLITE Database in android there is predefine class that is SQLITEOpenHelper .\nThere is no need of any third party library or external h/w for preforming operation on SQLITE Database.And in every Android Device SQLITE Database is in_build.</string>
  <string name="shared_preference">It is also storage techniques in our android application development. which is used for storing secure and small amount of data in the form of key and value pair.\nIt is used for session management or page tracking .\nIt is used for performing operation on authenticate data.\nMostly Shared Preference is used for Login , SignUp purpose.\nthe System create an preference file in our device that is in the form of xml formate.\n\nHow to Store Data in a Shared Preference :\n\tSharedPreferences sharedPreferences=getSharedPreferences("file_name",MODE_PRIVATE);\n\tSharedPreferences.Editor editor=sharedPreferences.edit();\n\n//For Storing String Data :\neditor.putString("key","value");\n\n// For Storing Int Data:\neditor.putInt("key",0);\n\n// For Storing Boolean Data :\neditor.putBoolean("key",false);\n\n// For Storing Float Data :\neditor.putFloat("key",0);\n\n// For Storing Long Data:\neditor.putLong("key",0L);\n\n//Save data:\neditor.commit();\n\nhow to get data from shared preferences:\nSharedPreferences sharedPreferences =getSharedPreferences( "file_name",Mode_Private );\n\n//get a String data:\nString s_data=sharedPreferences .getString ("Key","def_value");\n\n//get a Int Data—>
\nint i_data=sharedPreferences.getInt("key",int def_value);\n\n//get float data:\nfloat f_data=haredPreferences.getFloat("key",float def_value);\n\n//get Long data:\nLong l_data=haredPreferences.getLong("key",long def_value);\n\n//get boolean data:\nboolean b_data=haredPreferences.getBoolean("key",def def_value);</string>
 <string name="sqlite_database">It is also type of storage that is used for the storing public relational data in a "SQLITE Database" .\n For performing operation on SQLITE Database in android there is predefine class that is SQLITEOpenHelper .\nThere is no need of any third party library or external h/w for preforming operation on SQLITE Database.And in every Android Device SQLITE Database is in_build.\nTYPES :\n\t1. Static database :It is  offline database.Only single device can access this database.\n\t2.Dynamic database:\n It is online database.More then one device can access this database within internet</string>
 <string name="room_database"> Room is a persistence library that provide abstraction layer over the SQLITE database to allow a more robust database.
 With the help of room database,we can easily create the database and perform CRUD operation very easily.It works based on annotation.for Every Operation(Create,Read ,Update ,delete) it has a annotation. It is very short and simple database as compared to sqlite database.</string>
 <string name="room_elements">Room database has three Component:\n1) DAO interface(Data Access Object) :\n\tDAO annotated by @DAO.\n\tThe full form of DAO is Database Access Object which is an interface class.With the help of it we can perform different operation in our database. it has all data operation like (Create ,Read , Update,Delete) code.\n\t@Insert - Insert\n\t@Query - Read\n\t@Update - Update\n\t@Delete - Delete\n\n2) Entity Class ( Model Class):\n\tIt is annotated via @Entity annotation.It is a modal class .This class is having variables that will be our columns and the class is our table name.\n\n3) Data base class :\n\tIt is annotated by @Database annotation it has database information. it is an abstract class,Where we will be storing all our database entries which we can call entities.</string>
 <string name="web_services"> Web services is a type of services in our android application which is used for performing dynamic operations with the help of internet.\nIt is used for making a communication between client to server.\nThe client is our android application and the server is dynamic database i.e. available at cloud storage.\nThe web services is a most important topic in java/php/.NET/python and the android application development and IOS application development.\n\nIn our android application development, there are a basically two types of webservices :\n\t1) RESTFUL Webservices\n\t2) SOAP Webservices</string>
 <string name="type_of_webservices"> RESTFUL Webservices:\nIt stands for Representational State Transfer. It is a light weight webservices.It is a fast webservices. In our android application development most probably RESTFUL Webservices is used. It gave responses xml, json and text. and it is unsecure webservices. Programmer gave our own logic in this type of webservices.\n\nVolley:\n\tIt is a third party library provided by google which is used for invoking RESTFUL Webservices. With the help of this library, programmer needs parsing json data.and it has a some useful classes i.e.\n\t\tRequestQueue\n\t\tStringRequest\n\t\tImageRequest\n\t\tJsonObjectRequest\n\t\tJsonArrayRequest\n\t\tJsonObject\n\tJsonArray\n\nRetrofit:\n\tIt is also a third party library provided by square which is used for invoking RESTFUL Webservices.It has a implicit Json Parsing.\n\nSOAP Webservices:\n\tIt stands for Simple Object Access Protocol. It is a slow webservices and secure webservice.and programmer can not gave our own logic in this type of webservices. SOAP operation is done via SOAP jar file . In this file SOAP Envelope class is responsible for performing SOAP operation in our android application development. and basically SOAP is used in a weather application development or converting temperature conversion. It gave response in only xml format.</string>
<string name="json_detail">JSON :\n\tIt stands for "JavaScript Object Notation". It holds the data in the form of Key and value Pair.\nIt is a data parsing technique in our android application development.\nThere are a basically two types of  JSON :\n\t1) JsonArray\n\t2) JsonObject\n\nJsonArray :\nJsonArray is represented by "square bracket[]". Basically it holds the more than one json data.\n\nJsonObject :\n\tIt is represented by curly bracket{} and it holds the more than one string data in the form of key and value pair.</string>
<string name="volley_retrofit">Volley:\n\tIt is a third party library provided by google which is used for invoking RESTFUL Webservices. With the help of this library, programmer needs parsing json data.and it has a some useful classes i.e.\n\t\tRequestQueue\n\t\tStringRequest\n\t\tImageRequest\n\t\tJsonObjectRequest\n\t\tJsonArrayRequest\n\t\tJsonObject\n\tJsonArray\n\nRetrofit:\n\tIt is also a third party library provided by square which is used for invoking RESTFUL Webservices.It has a implicit Json Parsing.</string>
<string name="notification_detail"> Notification is a message you can display to the user outside of your application normal user interface.\nThere are four type of notifications\n\t1)Status-bar notification\n\t2)Notification drawer notification\n\t3)Heads -Up notifications\n\t4)Lock- Screen notifications.</string>
<string name="alert_and_toast"> Alert:\n\tAlert dialogs interrupt users with urgent information, details, or actions.\nAn alert is a blocking dialog that the user has to dismiss by clicking Ok.\n\nToast:\n\tThe toast class is used to display alerts to the user; it disappears after a few seconds. Toast with LENGTH_LONG will display for 3.5 seconds.\nWe can set Gravity to Top, Bottom or Center in Toast.\n\nNotification:\n\t The NotificationManager class is used to display notifications on the device status bar.The alert displayed by the NotificationManager class is persistent and can only be dismissed by the user when selected.\nNotification displays only at status bar.</string>
<string name="difference_linear_relative">difference between Linear layout and Relative layout.
\nLinearLayout:\n\t1)We can adjust views and widgets linearly i.e. Horizontally and vertically.\n\t2)It is  useful when we arrange views in a linear fashion.\n\t3)LinearLayout is less used as compared to RelativeLayout.\n\nRelative Layout:\n\t1)We can adjust views and widgets according to one’s satisfaction.\n\t2)It is useful when we arrange views in a relative fashion.\n\t3)RelativeLayout is used more in applications.</string>
<string name="constraint_detail">CoordinatorLayout:\nA CoordinatorLayout (a ViewGroup) brings the different elements (child Views) of a  layout into a harmonious or efficient relationship:\n\tWith the help of a CoordinatorLayout, child views work together harmoniously to implement awesome behaviours.A CoordinatorLayout is a super cool feature of Material Design that helps to create attractive and harmonized layouts.Views inside a CoordinatorLayout negotiate with others in order to work together effectively by specifying these Behaviors.\n\nConstraintLayout:
\n\tAndroid ConstraintLayout is used to define a layout by assigning constraints for every child view/widget relative to other views present.\n\tA ConstraintLayout is similar to a RelativeLayout, but with more power. The aim of ConstraintLayout is to improve the performance of the applications by removing the nested views with a flat and flexible design. A view inside the ConstraintLayout has handles(or anchor points) on each side which are used to assign the constraints. Let’s drag and drop a TextView on the layout and assign the constraints to it.</string>
<string name="ndk_detail"> Ndk stand for native development kit. By using NDK you can develop a part of app using native language such as c/ c + + to boost the performance.</string>
<string name="singleton_detail">A class that has only an object at a time is known as singleton class. If we are trying to create an instance of object second time that newly created instance points to the first instance. </string>
<string name="fragment_detail"> Fragment is a sub-activity or part of the activity.\nIt is embedded or attached with activity.\n  Without Activity we can not launch fragment\n\nFragment is Used for Replacing a particular part or portion of the screen.\nIt has its own lifecycle and it own UI .\n\nThe effect of the activity lifecycle on the fragment lifecycle :</string>
<string name="debugging_detail">The process of identifying and removing error from computer hardware and software is known as debugging process .In other word debugging is the process of finding and fixing error or bugs in the source code of any software. </string>
<string name="Apk_detail"> Apk file or Android application package is the compressed file format that is used to distribute and install application software .\nThe file has .apk extension.</string>
<string name="event_detail"> Changing the state of an object is known as an event. Example click on buttons  dragging mouse etc.\nWe can classify the event in the following two categories.\n\n1) Foreground events:\n\t These event are those events that require user interaction to generate .When a user click on a button, move the cursor etc.\n\n2) Background events: \n\tThese event are not require any user interactions these events are automatically generate in the background like OS failure ,OS interrupt.</string>
<string name="Anr_detail">ANR(Application is not responding) is a dialogue box that appear when the application is not responding .\nThis ANR dialogue is displayed whenever the main thread within an application has been unresponsive for a long time under the following condition.\n\t1) When there is no response to and input event even after 5 seconds.\n\t2) When a broadcast receiver has not completed its execution within 10 seconds.</string>
<string name="animation_detail"> Animation  is a process of creating motion and shape change.\nThere are four type of animation\n\n 1)Scale animations:\n\t Scale animation is used to make a smaller or larger view either on x-axis or y-axis .\n\nRotate animation:\n\tRotate animation is used to rotate a view around a pivot point to a certain number of degree.\n\nTranslate animation:\n\tTranslate animation is used to move a view along the x or y axis.\n\nAlpha animation:\n\tWith the help of this animation we can change the transparency of a view.</string>
    <string name="dart_interview_question">Dart Interview Question</string>
    <string name="what_is_dart_programming_language">Q1:What is Dart programming language?</string>
    <string name="qhat_is_the_purpose_of_dart_programming_language">Q2:What is the purpose of dart programming language?</string>
    <string name="what_is_collection_in_dart">Q27:What is collection in Dart?</string>
    <string name="difference_between_function_and_method_in_dart">Q26:What is difference between function and method?</string>
    <string name="what_is_webservices_in_dart">Q25:What is webServices?</string>
    <string name="difference_between_synchronous_and_asynchronous">Q24:What is difference between Synchronous and Asynchronous?</string>
    <string name="what_is_isolate_in_dart">Q23:What is Isolate in Dart?</string>
    <string name="what_is_exception">Q22:What is Exception ?</string>
    <string name="what_is_interface_in_dart">Q21:What is interface?</string>
    <string name="how_we_can_achieve_abstraction">Q20:What is abstraction and how we can achieve abstraction?</string>
    <string name="is_dart_support_function_overloading_or_not">Q19:Is Dart support function overloading or not?</string>
    <string name="what_is_inheritance_and_type_of_inheritance_in_dart">Q18:What is Inheritance and type of inheritance?</string>
    <string name="what_is_super_keyword_in_dart">Q17:What is super keyword in Dart?</string>
    <string name="what_is_static_keyword_in_dart">Q16:What is static keyword ?</string>
    <string name="what_is_this_keyword_and_where_we_can_use_it">Q15:What is this keyword and where we can use it?</string>
    <string name="what_is_super_constructor_in_dart">Q14:What is super constructor?</string>
    <string name="what_is_constructor_and_type_of_constructor_in_dart">Q13:What is constructor and type of constructor in dart?</string>
    <string name="what_is_oops_and_what_is_an_object_and_class_in_dart">Q12:What is OOPs and What is an object and Class?</string>
    <string name="what_is_package_in_dart">Q11:What is package in Dart?</string>
    <string name="what_is_lambda_function_in_dart">Q10:What is Lambda function in Dart?</string>
    <string name="q9_what_is_function_in_dart_and_how_many_type_of_function">Q9:What is function in Dart and How many type of function?</string>
    <string name="what_is_loops_and_type_of_loops_in_dart">Q8:What is Loops and type of loops?</string>
    <string name="what_is_standard_input_and_output_in_dart">Q7:What is standard Input and Output in Dart?</string>
    <string name="what_is_keyword_in_dart">Q6:What is keyword ?</string>
    <string name="what_is_operator_and_type_of_operator_in_dart">Q5:What is operator and type of operator?</string>
    <string name="what_is_variable_in_dart">Q4:What is variable in Dart?</string>



    <string name="dart_detail"> Dart is a open source, general purpose ,object oriented programming language with c style Syntax developed by the Google in 2011.\n It support application development in both client and server side.  \nThe dart language was released in 2011 but came into popularity after 2015 with dart 2.0 .\nThat is a compiled language so you cannot execute your code directly instead the compiler parses it and transfer it into machine code.\nDart language does not support array directly it support collection, which is used replicate the data structure.</string>
    <string name="purpose_dart"> The purpose of dart programming language is to create a frontend user interface for the mobile apps and web apps.</string>
   <string name="datatype_dart"> Whenever variable is created, each variable has an associated data type.\nData type define two thing of a data.
\n\t1) Type of data\n\t2)Size of data\nThe data type  classification is given below:\n\n1)Number:\n\t Number in dart are used to represent numeric literal.like int ,double,num.\n\n2)String:\n\t String represent a sequence of characters.\n\n3) Boolean:\n\t It represent Boolean values true and false.\n\n4) Lists:\n\tAnd it is an order group of object.\n\n5) Maps:\n\tIt represent is set of value as key-value pair.</string>
   <string name="variable_in_dart"> Variable just name given to a memory location.\n\t1) It is a combination of "vary + able" which means its value can be changed.\n\t2) It should start with a lowercase letter such as id,name etc.\nDart supports type checking. It means that it check with the data type and the data that variable holds are specific to that data or not.</string>
   <string name="operator_in_dart"> Operator are used to perform the mathematical operation on opened .Operator are used in program to manipulate data and variable.\nThere are type of operator in dart \n\n\t1)Arithmetic operator\n\t2) Assignment operator\n\t3) Bitwise operator\n\t4)Equality operator\n\t5)Logical operator\n\t6)Relational operator\n\t7)Type test operator\n\t8) Cascade notation operator</string>
  <string name="keyword_dart">Keywords are the set of reserve words which cannot be used as a variable or identifier.\n These keywords are case-sensitive.\nThere are in total 61 keywords in Dart programming language:\nabstract,else ,import,super,	as,enum,in,switch, assert,export , interface ,sync,async,extends,is,this,await,extension,library,throw, break,external,mixin,true,,case ,factory ,new,try,	class,final,catch,false,null,typedef,on,const,finally,operator,void,continue,for,part,while,covariant,Function,rethrow,with,default,get,return,yield,deferred,hide,set,do,if ,show,dynamic ,implements,static     </string>
  <string name="std_stdout"> In dart programming language you can take standard input from the user through the console via  the use of (.readLineSync()) function. To  take input from the console you need to import library named dart:io from libraries of dart.\nStdin class:\n\nThis class allow the user to read data from standard input in both synchronous and asynchronous way the method readLineSync() is  one of the method used to take input from the user.\n It takes by default string values we can convert these value in other data type as per need.\n\nStandard output in dart:\n\tThere are two way to display output in the console.\n\t\t1) using print statement\n\t\t2) using stdOut.write() statement.</string>
  <string name="loop_in_dart">Loops are used to repeat again and again that given statement until the condition are not completed.\nThere are different ways to do so.\n They are:\n\t1)for loop\n\t2)for… in loop\n\t3)for each loop\n\t4)while loop\n\t5)do-while loop
  \n\nFor loop:\nFor loop in Dart is similar to that in Java and also the flow of execution is the same as that in Java.\nSyntax:\n\tfor(initialization; condition; text expression){\n\t\t // Body of the loop\n\t}\n\nfor…in loop:\nFor…in loop in Dart takes an expression or object as an iterator. It is similar to that in Java and its execution flow is also the same as that in Java.\nSyntax:\n\tfor (var in expression) {\ n\t\t // Body of loop\n\t}\n\nfor each … loop: \nThe for-each loop iterates over all elements in some container/collectible and passes the elements to some specific function.\nSyntax: \n\tcollection.foreach(void f(value)) \nf( value): It is used to make a call to the f function for each element in the collection. \n\nwhile loop: \nThe body of the loop will run until and unless the condition is true.\n It is an entry control loop. \n Syntax: \n\twhile(condition){ \n\t\ttext expression; \n\t\t// Body of loop \n\t} \n\ndo..while loop:\nThe body of the loop will be executed first and then the condition is tested. \n Syntax: \n\t do{ \n\t\t text expression; \n\t\t // Body of loop \n\t }while(condition);</string>
  <string name="function_in_dart">Function is a set of statement that take input do some work specific computations and produce output.\nSyntax:-\n\tReturn type fun-name(parameters)\n\t\t{// body\n\t\treturn value;\n\t}\nThere are four type of functions\n\t1)  No argument and no return type.\n\t2) argument with argument and no return type\n\t3) No return type and with argument\n\t4)With argument and return type </string>
  <string name="Lambda_fun">Lambda function are the short way of representing a function in dart. They are also called Arrow functions.\n Function:\n  Syntax using Fat Arrow \n\tdata_type fun_name(parameter) =>\n\t\t  // method body</string>
  <string name="package_in_dart"> The package is a set of dart program organized in an independent, reusable unit. It contains a set of functions and classes for a specific purpose.Dart comes with an inbuilt Package Manager known as pub package manager.\nIt is used to Install, organize, and manage third-party libraries, tools, and dependencies.</string>
  <string name="oop_in_dart">Object oriented programming is a methodology to design a program using classes and objects.\n\tIn other words we can say that OOPs is a fundamental programming concept which developers use for binding the data and function together using the concept of classes and objects.\n\tThe main features of OOPs are given below:\n\t\t1) Encapsulation\n\t\t2) Inheritance\n\t\t3) Polymorphism\n\t\t4) Abstraction\n\nCLASS:  Class is prototype that consist of object in different states and behaviour .\nIt has number of methods that are common the object present within that class.\nClass is a user -defined blueprint from which object are created. \nA class is a logical entity.\nA class does not take memory space when created. A class bind daughter and method together into a single unit.\n\nOBJECT: An object is a real world entity . \nDifferent objects have different states or attributes and behaviour. examples cars ,dog ,man etc. \nAn object is a real-world entity which is an instance of a class .\nAn object like a variable of the class and object is a physical entity .\nAn object take memory space when it is created.</string>
  <string name="constructor_in_dart">In Dart constructor is a special type of method which has the same name as class name and has no return type.\nIt is a special type of method which is used to initialize the object.\nAt least one constructor is called when the object of the class is created.\nIt calls a default constructor if there is no constructor available in the class.\n\nThere are some rules defined for the constructor.\n\t1)Constructor name must be the same as its class name\n\t2)A Constructor must have no explicit return type\n\t3)A  constructor cannot be abstract, static, final, and synchronized.\n\nThere are three types of constructors in Dart:\n1)Default constructor:\n\tAll those constructor which has no parameter is called default constructor.\nSyntax:\n\tclass name()\n\t\t{//body\n\t}\n\n2)Parameterized constructor:\n\tA constructor which have some parameter is called parameterized constructor.\n\t class name(parameter)\n\t\t{//body\n\t}\n\n3)Named constructor:\n\tAs you know that we cannot define multiple constructor with the same name. This type of constructor is the solution to the problem they allow the user to make multiple constructor with the different name.\nSyntax:\n\tclass name. constructor name( parameters)\n\t\t{// body\n\t}</string>
  <string name="super_cons_in_dart"> In dart the sub class can inherit all the variable and the member function of the parent class with the use of extends keyword but it cannot inherit constructor of parent class. We use the super keyword to inherit the constructor of parent class. There are two way to call super constructor\n1)Implicitly\n2)Explicitly</string>
  <string name="static_in_dart"> The static keyword is used for memory management of global data members. The static keyword can be applied to the fields and methods of a class.Dart Static Variables
  \nThe static variables belong to the class instead of a specific instance. A static variable is common to all instances of a class: this means only a single copy of the static variable is shared among all the instances of a class. The memory allocation for static variables happens only once in the class area at the time of class loading.\n\nDeclaring Static Variables\n\tStatic variables can be declared using the static keyword followed by data type then the variable name\nSyntax:\n\t static [date_type] [variable_name];\n\nDart Static Methods:\nThe static method belongs to a class instead of class instances. A static method is only allowed to access the static variables of class and can invoke only static methods of the class. Usually, utility methods are created as static methods when we want it to be used by other classes without the need of creating an instance.\n\nDeclaring Static Methods:\nA static method can be declared using static keyword followed by return type, followed by method nam\nSyntax:\n\tstatic return_type method_name()\n\t{\n\t\t// Statement(s)\n\t}</string>
    <string name="inheritance_dart"> Inheritance is a basic concept of object oriented programming language. Inheritance is a process to achieve a reusability among the objects. \nIt is also use to achieve dynamic binding.With the help of inheritance concept we can inherit the data member and the member function of the parent class into a child class with the help of extends keywords.\nThe real life example of inheritance is child and parents, all the properties of father are inherited by his son.\nThere are 5 type of inheritance.
  \n\t1) Single inheritance :\n\t\tIn single inheritance there exists single base class and single derived class.When a class inherits another class, it is known as a single inheritance. In the example given below, Dog class inherits the Animal class, so there is the single inheritance.\nSyntax:\n\tclass Animal{\n}\nclass Dog extends Animal{\n}\n\n\t2) Multi level inheritance:\n\t\tWhen there is a chain of inheritance, it is known as multilevel inheritance. As you can see in the example given below, BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.\n In other word we can say Multilevel inheritance is a process where a class inherit another class which is a child class of another parent class.\n\n\t3) Hierarchical inheritance:\n\t When two or more classes inherits a single class, it is known as hierarchical inheritance. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.\n\n\t4) Hybrid inheritance:\n\tHybrid inheritance is a combination of hierarchical inheritance and multiple inheritance.so it is not supported in java through class.\n\n\t5) Multiple inheritance:\n\twhen a class inherits more than one class ,it is known as multiple inheritance.\nTo reduce the complexity and simplify the language, multiple inheritance is not supported in java.\n\nConsider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.\nSince compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.</string>
 <string name="super_in_dart">In Dart, super keyword is used to refer immediate parent class object. It is used to call properties and methods of the superclass. It does not call the method, whereas when we create an instance of subclass than that of the parent class is created implicitly so super keyword calls that instance.\nAdvantages of super keyword:\n\t1)It can be used to access the data members of parent class when both parent and child have member with same name.\n\t2)It is used to prevent overriding the parent method.\n\t3)It can be used to call parameterized constructor of parent class.\nSyntax:\n// To access parent class variables\n\tsuper.variable_name;\n// To access parent class method\n\tsuper.method_name(); </string>
 <string name="is_support_fun_overloading">Dart does not support function overloading because in dart we cannot define two constructor in a class only one constructor is used   with same name as class name. </string>
 <string name="interface_in_dart">An interface is a blueprint of class. Dart does not have a syntax for declaring interfaces. The class declaration is themselves interface in a dart.\nAny class can be act as an interface. Classes can use implements keyword to use any class as an interface.\nOnce any class is used as interface then it is mandatory to override each and every method and instance variable of that class. In simple words, a class must redefine every method and instance variable of the interface.\nSyntax:\n\tclass class_name implements interface_name\n\n   Dart does not support multiple inheritance but dart can implement multiple interfaces. To provide similar power and functionality.\nThe syntax for declaring multiple interfaces:\n\tclass class_name implements interface1, interface2, interface3</string>
 <string name="Exception_dart">An exception is an error that takes place inside the program. When an exception occurs inside a program the normal flow of the program is disrupted.\nEvery built-in exception in Dart comes under a pre-defined class named Exception. To prevent the program from exception we make use of try/on/catch blocks in Dart.\ntry {\n\t // program that might throw an exception\n}\non Exception {\n\t // code for handling exception 1\n}\ncatch Exception2 {\n\t // code for handling exception 2\n}\n\nFinal block: The final block in dart is used to include specific code that must be executed irrespective of error in the code. Although it is optional to include finally block if you include it then it should be after try and catch block are over.\nSyntax:\nfinally {\n\t //body\n} </string>
 <string name="isolate_dart">   Dart allows us to asynchronous programming which runs our program without getting blocked. The asynchronous programming is used to achieve concurrency. Dart isolate is a version of the thread. But there is key difference between the common implementation of Thread or Isolates.\n   The isolate works differently in comparison of Thread. The isolates are independent workers that do not share memory, but instead interconnect by passing message over channels. Since isolates completes its task by passing message thus it need a way to serialize a message.\nDart provides the dart:isolate package to apply the isolate in our program. It provides the solution to taking single-threaded Dart code and allowing application to make greater use of the hardware available.\nDart provides the spawn() method to create an isolate. It must be declared with an entry point with a single parameter. This parameter displays a port which isolate use to refer back notification message.\n\nThe dart: isolates  package provides the kill() method which is used to stop a running isolate.</string>
 <string name="synchronous_async">Asynchronous means that multiple related operation can run concurrently without waiting for the task to complete.example: text message.\nAsynchronous is a non blocking architecture.\n\nSynchronous:-\n\tSynchronous is a blocking architecture and is best for programming reactive system.Synchronous means that only one operation and run at a time while one operation is being performed, other operators instructions are blocked. </string>
 <string name="collection_in_dart">    Collection is a group of multiple objects represented as a single unit.\nIn dart , the dart:collection library encompasses classes and utilities that supplement the collection support in dart:core.\nThe dart:collection library is a collection of interfaces and classes which helps in storing And processing the data efficiently
    \n\nList in  Dart:\n\t    A List is simply an ordered group of objects. The dart:core library provides the List class that enables creation and manipulation of lists.A very commonly used collection in programming is an array. Dart represents arrays in the form of List objects.\n A list Can be ,\n\t1) Fixed Length List− The list length cannot change at run-time.\n\t2)Growable List− The list length can change at run-time.\n\nSet in Dart:\n\tSet represents a collection of objects in which each object can occur only once. The dart:core library provides the Set class to implement the same.\nSets in Dart is a special case in List where all the inputs are unique i.e it does not contain any repeated input. It can also be interpreted as an unordered array with unique inputs.\nSyntax \n\t var setName = type{};\n or\n\t  Set type setName = {};\n\nMap in Dart:\n\t    The Map object is a simple key/value pair. Keys and values in a map may be of any type. A Map is a dynamic collection. In other words, Maps can grow and shrink at runtime. The Map class in the dart:core library provides support for the same.\n1)Just like List, Map is also a type of collection.\n2) In Maps data is stored in key: value pairs.\n3) Keys and values can be of any type.\n4)Map can contain NULL value as well.\n\nThere are two ways to declare maps:-\n1)Using Map Literal\n2)Using Map constructor</string>
  <string name="function_and_method">All those function which are created outside the class is called function.And the function which are created inside the class they are called method. </string>
  <string name="webservice_dart">Web services is a type of services in our android application which is used for performing dynamic operations with the help of internet.\nIt is used for making a communication between client to server.\nThe client is our android application and the server is dynamic database i.e. available at cloud storage.
\n\nThe web services is a most important topic in java/php/.NET/python and the android application development and IOS application development.\n\nIn our android application development, there are a basically two types of webservices :\n\t1) RESTFUl Webservices\n\t2) SOAP Webservices\nRESTful Webservices:\n\tIt stands for Representational State Transfer. It is a light weight webservices.and it is a fast webservices. In our android application development most probably RESTful Webservices is used. It gaves responses xml, json and text. and it is unsecure webservices.Programmer gave our own logic in this type of webservices.\n1)Volley: 	\n\tIt is a third party library provided by google which is used for invoking RESTFul Webservices.with the help of this library, programmer needs parsing json data.and it has a some useful classes\n\t1)RequestQueue\n\t2)StringRequest\n\t3)ImageRequest\n\t4)JsonObjectRequest\n\t5)JsonArrayRequest\n\t6)JsonObject\n\t7)JsonArray\n\n2)Retrofit: \n\tIt is also a third party library provided by square which is used for invoking RESTful Webservices.It has a implicit Json Parsing.\n\nSOAP Webservices:\n\tIt stands for Simple Object Access Protocol. It is a slow webservices and secure webservice.and programmer can not gave our own logic in this type of webservices.\nSOAP operation is done via SOAP jar file . In this file SOAP Envelope class is responsible for performing SOAP operation in our android application development.and basically SOAP is used in a weather application development or converting temperature conversion. It gave response in only xml format.</string>

<string name="kotlin_detail">Kotlin is a upgraded version of java .Android support two programming language.\n\t1) java\n\t2)kotlin\nIn July 2011 kotlin programming language for the jvm  developed by jetBrains.\nOne of the stated gole of kotlin is  to compile as  quickly as java. Kotlin name come from kotlin island near st. petersburg. Kotlin 1.0 version was released on 15 feb  2016.On 7 May 2019 google announced that the kotlin programming languages is now its preferred language for android app development. </string>
<string name="imp_feature_kotlin"> There are some most important features of kotlin.\n\n1)Concise:-\n\t Kotlin will  decrease the size of code compare to Java .Code length of kotlin project will be 40% fever compare to Java.\n\n 2) Interoperability: \n\tIt  means if we use the kotlin code in JAVA project then there will be no difficulty. \n\n 3) Features -rich: \n\tIt provide several advance feature such as operator overloading, lambda expressions, string template etc. \n\n 4) Easy: \n\tIt is it is easy to learn programming language. \n\n5)Less-Error-prone: \n\tIt is statically type language and statically type language do type checking at compile time. \n\n6)Safe: \n\tEvery variable in kotlin is non- null by default .It provide the safety from NullPointer  exception by supporting nullability. \n\n 7)Smart-Cast: \n\t No need to declare the data type of variable. It explicitly type cast the immutable value and insert the value in its safecast automatically.</string>
<string name="val_const_datatype"> Both are immutable in nature but the value of the const variable must be known at the compile time and the value of the val variable must be known at the runtime.</string>
<string name="data_class">Data class is a class whose main  purpose is to hold data. It is Marked as data.\nSyntax:\n\t data class User( var name: String,var age: int)\nThe data classes must have the following requirements:\n\t 1)The primary constructor must have at least one parameter.\n\t2)All primary constructor  parameter need to be marked as val or var .\n\t3)Data classes cannot be abstract open sealed and inner. </string>
<string name="support_primitive">No kotlin does not support for primitive data type like in Java. </string>
<string name="range_operator"> Range operator help to iterate within a range its operate form is (..).\nExample:\n\t  For(i in 1..5)\n\t{ println(i);\n}</string>
<string name="safeCall_nullCheck"> SAFE CALL:\nThe safe call operator is used to check if the variables value is null or not.\n If it is null then it will  return  null otherwise it will return the desire value.\n\nNULL CHECK:\nIf you want to throw null pointer exception when the variables value is null you can use the  null check or !! Operator.</string>
<string name="ternary_operator">No in kotlin we do not have a ternary operator like  java but we can use a functionality of the ternary operator by using if  else or Elvis operator. </string>
<string name="elvis_operator">In kotlin, we can assign null value to a variable using the null safety property.To check if a value has null value, we can use if else or can use the Elvis operator (?:). </string>
<string name="open_keyword">In kotlin the classes and functions are final by default so it is not possible to inherit the class or override  the function .To achieve this we need to use open keyword before the class and function. </string>
<string name="constructor_kotlin">Constructor is a special type of member function .A concept which is same for all user we can write it in constructor.\n In java name of constructor is same as class name But in kotlin the name of secondary constructor have constructor keyword .Here also it have no return type.\n\n Reason for special member function:\n1)We can not call the constructor explicitly it will be call implicit at the time of object creation.\n2) it can not return any value.
\nSyntax:\n\nconstructor()\n{\n\t//body of constructor\n}\nconstructor(name:String)\n{\n\t//body of cons\n}\n\nIn kotlin there are two type of constructor.\n\n1)Primary Constructor:\n\tIn kotlin the primary constructor is a part of the class header.kotlin facilitates you to declare a constructor in the class header itself.\nSyntax:\nclass Person (name:String,age:Int)\n{\n\t//body of class/n}\n\n2)Secondary constructor:\n\tIn Kotlin, secondary constructor can be created one or more in class. The secondary constructor is created using constructor keyword.\nSyntax:\n\tclass myClass{\n constructor(id: Int){\n\t //code\n }\nconstructor(name: String, id: Int){\n\t  //code\n }\n}  </string>
<string name="lateinit_in_kotlin"> Late init means late initialisation .It is used when you do not want to initialize a variable in the constructor  and instead initialize it later. You should declare that variable with lateinit keyword to guarantee the initialization ,not before using it. It will not allocate memory  until it is initialized.\nYou cannot use lateinit for primitive data type property like Int,Long etc.</string>
<string name="jvmStatic_jvmOverload"> The @JVMStatic annotations is used to tell the compiler that the method is static method and you can use it in Java code.\nThe @JVMOverloads annotations is used when we need to use the default value passed as an argument in kotlin code from the Java code.\nThe @JVMField annotations is used to access the fields of a kotlin class from Java code with out any getter and setter.</string>
<string name="kotlin_to_java"> We can convert a kotlin source file to a java source file.\n1) First open your kotlin project in android studio.\n2) Then navigate to tools>kotlin >show kotlin Byte code.\n3) Now  click on the  decompile button to get your  java code from the byte code.</string>
<string name="companion_object">Kotlin does not have static  member or member function  unlike java or c#. \nIf we need to write a function that can be called without having a class instance but need access to the internal of a class .We can write it as a member of a companion object declaration inside the class.
\nExample:\nclass Event manager\n\t\n{\ncompanion Object firebase manager{\n\t}\n}\nVal firebaseManager=EventManager.firebaseManager </string>
<string name="feature_not_in_java"> There are some features which are not in Java language.\n\n1)Null safety\n2) Companion Object\n3) Operator overloading\n4) Coroutines\n5)Range Expressions\n6)Smart cast</string>
<string name="equal_operator_difference"> ==  operator is generally used to compare the value stored in variable.The === operator is used to check if the reference of the variables are equal or not. </string>
<string name="lateinit_and_lazy">There are difference between lateinit and lazy.\nLateinit:\n\t1) The lateinit can be  initialized from anywhere the object is seen.\n\t2)In lateinit, multiple initialization are possible.\n\t3) The lateinit is non thread safe.\n\t4) It is not eligible for not null property.\n\t5) you can use it only for var.\n\t6) It is not allowed on properties of primitive type.\n\nLazy:\n\t1) The lazy can only be initialized from the initializer lambda.\n\t2) the lazy can be initialized a single time only.\n\t3) The lazy support thread safety.\n\t4) it is also not eligible for non null property.\n\t5) you can use it only for val.\n\t6) It is allowed on properties of primitive type.</string>
<string name="coroutines_kotlin">According to kotlin coroutines are like  lightweight  threads. They are lightweight because while creating them they do not allocate new thread.Instead,they use predefined thread pools and smart scheduling.\nScheduling is the process of determining the work in a sequential process and it decide which piece of work you will execute next.We can suspend and resume the coroutines while execution. </string>
<string name="launch_Async_kotlin">Launch does not return anything and async return an instance of differed which has an await () function .\nIn other words we can say that launch is used to fire and forget and async is used to perform a task and return a result. </string>
<string name="bang_operator"> The kotlin double bang operator convert any value to a non null type and throw a kotlin NullPointer exception if the value is null It is called the not null assertion operator.</string>
<string name="var_val_in_kotlin">The variable declaration with var and the variable declaration with val is used for different purposes. If you want to declare some mutable (changeable) variable, you should use var. If you want to declare the immutable variable, you should use val because val variables can not be changed once you have assigned them.</string>
<string name="switch_kotlin">The switch is used in Java, but in Kotlin, that switch gets converted to when. When has a better design as compared to switch, and it is more concise and powerful than a traditional switch. We can use when either as an expression or as a statement.</string>
<string name="kotlin_interoparable_java"> Kotlin is interoperable with Java because it uses JVM bytecode. It provides the facility to compile it directly to bytecode that helps to achieve faster compile-time and makes no difference between Java and Kotlin for JVM.</string>

  <string name="flutter_native_hybrid"> Native app development:\n\tNative application are the application of smartphone that are  specifically design for mobile operating system.\nWe can download and install native applications on a device from the Google Play Store and app store.These applications are particularly developed for one platform.\n\nHybrid app development:\n\tHybrid application is the combination of native application  and applications hybrid app written by using the web technology like HTML5 and css . Hybrid app can be install and download from web browser and app store.Hybrid app Camper on various platforms it means that they can operate on both IOS and Android as they have a single code base.</string>
  <string name="flutter_detail"> Flutter is a open source UI software development kit created by Google. It is used to develop cross platform application from a single code base for iOS ,Android, web browser, Linux, Mac OS and windows.</string>
  <string name="which_language">Dart language is used for flutter. </string>
  <string name="async_await_future_isolate">Dart Async:\n\tDart Async is related to asynchronous programming. It executes the asynchronous operation in a thread. It ensures that the critical functions to be executed until completion. The asynchronous operation is executed, separately the main application thread. In Dart, one operation cannot interrupt the other operation; it means one operation can execute at a time no other part of the program can avert it.\n\nDart Future:\n\tThe Dart Future is defined as getting a result sometime in the future. The Future object uses to facilitate asynchronous programming. Future objects are a tool to denote values returned by an expression whose execution will complete at a later point in time (In Future). In order to work with the future, we can use either async and await or the Future API.\n\nawait keyword:\n\tThe await keyword is also used to execute function asynchronously. It suspends the currently running function until the result is ready. When it returns the result, then it continues on to the next line of code. The await keyword can only be used with async functions.
  \nSyntax \n\tawait e;\nHere, e is an asynchronous expression, and it is expected to evaluate to a Future. The await expression evaluates e, and then suspends the currently running function until the result is ready.\n\nIsolate:\n\tThe isolate works differently in comparison of Thread. The isolates are independent workers that do not share memory, but instead interconnect by passing message over channels. Since isolates completes its task by passing message thus it need a way to serialize a message.Dart provides the dart:isolate package to apply the isolate in our program. It provides the solution to taking single-threaded Dart code and allowing application to make greater use of the hardware available.Dart provides the spawn() method to create an isolate. It must be declared with an entry point with a single parameter. This parameter displays a port which isolate use to refer back notification message.\nThe dart: isolates package provides the kill() method which is used to stop a running isolate.</string>
  <string name="main_in_flutter">The main() function is a predefined method in dart. This method act as the entry point to the applications .The execution of the programming start with the main() function. The main () function can be used only once in a program. </string>
  <string name="runApp_flutter">The runApp() method is typically called in the main() functions of a flutter app, which is the entry point of the application execution.\nThe runApp ()method is responsible for creating the WidgetFlutterBinding which is the binding between the framework and the flutter engine. In other words we can say runApp() method is responsible to inflate the given widgets and attached it to the screen. </string>
   <string name="material_flutter">MaterialApp is a pre define class or widgets  in a flutter.\nIt is likely main or core component of a flutter App.\nThe MaterialApp widgets provide a wrapper around other Material widget.\nWith the help of materialApp widget we can access all the other component and  widget provided by flutter SDK. Like text widget, Listview widget, Scaffold widget etc.</string>
   <string name="scafford_flutter">Scaffold is a class in flutter which provides many widgets or we can say API like  drawer, snack bar ,bottom navigation bar ,floating action button ,Appear etc.\nScaffold will expand or occupy the whole device screen.It will occupy the available spaces . </string>
   <string name="stateful_stateless">A widget is either  stateful or stateless.\nStateful Widget:\nThese widgets are mutable and can be updated dynamically based on user interactions or other events. If a widget can change their  state when a user interact with it .It is called stateful widget. like radio button, checkbook, slider ,form and text field .\n\nStateless Widgets:\n\tThese widgets are immutable, meaning they cannot be changed once they are created.If a widget is stateless then it can not change their state when user interact with it.like   Icon,text etc. </string>
   <string name="initState">The initState() is a method that is called when the object for your stateful widget is created and inserted inside the widgets tree. It is  basically the entry point for the stateful widget.initState() method is called only and only once .\nThe satState() function allow us to set the property of the state object that triggers a redraw of the UI.setState() is a method that is used to update the state of a Stateful widget in Flutter. When a widget is updated, the Flutter framework calls the build() method of the widget to rebuild its UI based on the new state.\nThe setState() method is used to tell the Flutter framework that the state of the widget has changed and that it needs to rebuild the UI. The setState() method takes a function as an argument, which updates the state of the widget. Once the state is updated, the build() method is called again, and the UI is rebuilt. </string>
  <string name="build_flutter">Build abstract method describes the part of the user interface represented by this widget. </string>
  <string name="navigator_in_flutter"> The user navigates between different pages to use different functionalities. Concepts like pages are called routes in Flutter. We can use Navigator.push() to navigate to a new route and Navigator.pop() to navigate to the previous route. Routes are managed by the Navigator widget. The navigator manages a stack of routes. Routes can be pushed on the stack using push() method and popped off the stack using pop() method. The top element in the stack is the currently active route. Navigator is a stateful widget with NavigatorState as its state. In this article, we will see how to navigate from one screen to another screen in Flutter.
     \nHow to use:\n\tNavigator class has a push method to Navigate to the next screen.\n\n\tNavigator.push(context,MaterialPageRoute(builder: (context) =>NextPage()));</string>
  <string name="sign_unsign_in_flutter">Signed apk is signed with your own key which is guarded by yourself,since it is unique Play Store would accept it.\nUnsigned apk is actually signed by debug
      key you can consider it is dummy since it is not secure and publicly available and play Store  would not accept it.</string>
  <string name="pubspec_detail"> Every flutter project include a pubspec.yaml often referred to as the pubspec.A basic pubspec is generated when you create a new flutter project. It is located at the top of the project tree and contain metadata about  the project that the dart and flutter tooling needs to know about the project.\n\nStep1:-\n\tOpen the terminal/ command prompt and go to a folder/ location where you want your project to be created.\nStep2:-\\n\tWrite flutter create your-project- name.\nStep3:-\n\nWait for terminal to create your project.\n\nCommands for run your project:\n\tStep 1:-\n\t\t Once the project is created go to the project location by writing   cd project -name.\nStep2:-\n\tThen write  flutter run to run your app in emulator/web/mobile.\nStep3:-\n\tWait for some time to let your app run on your device.</string>
  <string name="flutter_create_and_run_command">We can create  or runs flutter app by terminal following these step:
  \nStep1:-\n\tOpen the terminal/ command prompt and go to a folder/ location where you want your project to be created.\nStep2:-\n\tWrite flutter create your-project- name.\nStep3:-\n\tWait for terminal to create your project.\n\nCommand for run your project:\nStep 1:-\n\tOnce the project is created go to the project location by writing   cd project -name.\nStep2:-\n\tThen write  flutter run to run your app in emulator/web/mobile.\nStep3:-\n\tWait for some time to let your app run on your device. </string>
  <string name="push_pop_pushNamed"> push:\nIn case of Flutter, when we navigate to another screen, we use the push methods and Navigator widget adds the new screen onto the top of the stack. The push() method adds a Route to the stack of routes managed by the Navigator.pop:\nReturn to the first route using Navigator.pop().The pop() method removes the current Route from the stack of routes managed by the Navigator.\npushNamed:\nWith the help of pushNamed methods, we can navigate to any screen whose route is defined in main.dart. We call them namedRoute for reference. The use-case of this method is pretty straightforward.</string>
  <string name="builder_in_flutter">Whenever we create a new widget in a flutter there is always a build widget associated with it and the BuildContext parameter is passed by the framework.like:\nWidget build(BuildContext context).</string>
  <string name="key_in_flutter">In Flutter, a Key is an object that identifies a widget. It is used to maintain the state of the widget .When a widget is built, Flutter assigns a unique identity to it based on its location in the widget tree. However, when the widget tree is modified, such as when a widget is added, removed, or moved, the identity of the widgets can change. This can cause unexpected behavior and can lead to performance issues.
      \nTo solve this problem, Flutter provides the Key class, which can be used to assign a unique identity to a widget that persists even if the widget tree is modified. There are two main types of keys in Flutter:\n\nGlobalKey:\n\t This key is used to identify a widget from anywhere in the app. It is commonly used when a widget needs to be accessed or updated from multiple parts of the app, such as when managing the state of a form.\n\nObjectKey: \n\tThis key is used to identify a widget based on its object identity. It is commonly used when managing a list of items, such as in a ListView, where the position of the item can change but its identity remains the same. </string>
  <string name="materialApp_widgetApp">MaterialApp and WidgetsApp are two different types of applications in Flutter.\nMaterialApp is used for creating applications that follow the Material Design guidelines. It provides pre-built widgets that follow the Material Design specifications, such as AppBar, BottomNavigationBar, and FloatingActionButton.WidgetsApp, on the other hand, is used for creating applications that do not follow the Material Design guidelines. It provides a minimal set of widgets that can be used to create custom UI elements. </string>
  <string name="push_and_pushReplacement">In Flutter, push and pushReplacement are two methods that are used to navigate between different screens in an app. Both methods are available on the Navigator class, which manages the navigation stack in a Flutter app.\nThe push method is used to push a new route onto the navigation stack, which adds a new screen to the app’s UI. This method does not remove the previous screen from the stack, which means that the user can use the back button or swipe gesture to navigate back to the previous screen.\n\nThe pushReplacement method is similar to the push method, but it replaces the current screen on the navigation stack with a new screen. This means that the previous screen is removed from the stack and cannot be navigated back to using the back button or swipe gesture.So, the main difference between push and pushReplacement methods is that push adds a new screen to the navigation stack while pushReplacement replaces the current screen with a new screen. </string>
  <string name="WidgetInspector_in_Flutter">The Widget Inspector is a tool that is used to inspect and debug the widget tree of a Flutter application.\nThe Widget Inspector provides information about the properties and state of each widget in the tree. It also allows developers to modify the properties and state of widgets in real-time, which can be useful for debugging UI issues. The Widget Inspector can be accessed by pressing the “Toggle Debug Paint” button in the Flutter DevTools, or by using the hotkey “Ctrl + Alt + Shift + W” in Android. </string>
  <string name="GridView_and_ListView_in_Flutter">While both widgets can be used to display similar types of data, there are some key differences between them.\nLayout orientation: \n\tListView displays its items in a single column, either vertically or horizontally, depending on the value of the scroll direction property. On the other hand, GridView can display its items in a grid layout, with multiple columns and rows.
  \nItem layout: \n\tListView typically displays its items as a single column of widgets. Each item in the list is displayed below the previous item. However, ListView can also be used to display items in a horizontal layout, where each item is displayed to the right of the previous item. GridView, on the other hand, displays its items in a grid layout, with each item placed in a cell in the grid. The layout of the cells can be controlled using the GridView.count or GridView.builder constructors.\nScrolling behavior:\n\t ListView can be scrolled vertically or horizontally depending on the scrollDirection property. The scrolling behavior of the ListView can be controlled using the physics property.GridView also supports both vertical and horizontal scrolling, but it has additional scrolling behavior options, such as scrollable grids, and scrolling in both directions.\nItem placement:\n\t In ListView, each item takes up the full width of the screen or its container, with a fixed height by default, unless specified otherwise.In GridView, the width and height of each item can be adjusted to fit the cell of the grid using the childAspectRatio property.\nUse cases:\n\t ListView is commonly used to display a list of items, such as a list of messages, a list of contacts, or a list of products.GridView, on the other hand, is commonly used to display items in a grid layout, such as a gallery of images, a grid of products, or a grid of categories. </string>
  <string name="GestureDetector_widget_in_Flutter"> The GestureDetector widget is used to detect gestures, such as taps and swipes, in a Flutter application. The GestureDetector widget provides several callbacks, such as onTap and onVerticalDragUpdate, which can be used to handle different types of gestures. For example, a developer could use the onTap callback of the GestureDetector widget to handle taps on a widget in the application.</string>
  <string name="Navigator_widget_in_Flutter">The Navigator widget is used to manage a stack of screens, or “routes,” in a Flutter application. The Navigator widget provides several methods, such as push and pop, which can be used to navigate between screens. For example, a developer could use the push method of the Navigator widget to navigate to a new screen in the application, and use the pop method to return to the previous screen. </string>
  <string name="FutureBuilder_widget_in_Flutter">The FutureBuilder widget is used to rebuild a widget when a Future completes in a Flutter application. The FutureBuilder widget provides a builder function that can be used to rebuild a widget tree when a Future completes. For example, a developer could use the FutureBuilder widget to rebuild a widget that displays the data returned by a Future after it completes. </string>
  <string name="HotRestart_and_Hot_Reload">The following are the essential differences between Hot Restart and Hot Reload:\nHot Reload:\n\t1)It works with a small r key on the terminal or commands prompt.\n\t2)The hot reload feature allows us to quickly compile the newly added code in the file and sent them to Dart Virtual Machine (DVM). After DVM completes the updation, it immediately updates the UI of the app.\n\t3)It helps to build UI, add new features, fix bugs, and make app development fast.\n\nHot Restart:\n\t1)It mainly works with States value.\n\t2)It allows developers to get a fully compiled application because it destroys the preserves State values and sets them to their defaults. On every Hot Restart, our app widget tree is completely rebuilt with the new typed code.\n\t3)It takes more time than Hot Reload to compile and update the app. </string>
  <string name="mixins">Dart does not support multiple inheritances. Thus to implement the multiple inheritances in Flutter/Dart, we need mixins. Mixins provide a way to write the reusable class code in multiple class hierarchies. </string>
  <string name="Null_aware_operators">Dart provides some useful information to handle the null values.\n1. The "??=" assignment operator that assigns a value to a variable only when that variable is null.\nint a; // Initial value of a is null.\na ??= 5;\nprint(a); // It will print 5.\n\n2. The "??" null-aware operator that is used to evaluate and returns the value between two expression. It first checks the expression 1 and if it is non-null, returns its value; otherwise, it will evaluate and returns the value of expression 2:\nprint(3 ?? 5); // It will print 3.\nprint(null ?? 5); // It will print 5. </string>
    <string name="context_in_flutter">In flutter, the context  refers to the location of a widget in  the widget tree.And handle to the location of a widget in the widget tree.\ncontext is a BuildContext instance that gets passed to the builder of a widget in order to let it know where it is inside the Widget Tree of your app.\nOne of the common uses is passing it to the of method when using an Inherited Widget.\nCalling Something.of(context), for example, returns the Something relative to the closest widget in the tree that can provide you with that Something.</string>
    <string name="lifecycle_of_stateful_widget">The lifecycle has the following simplified steps:\n1)createState():\n\tWhen Flutter is instructed to build a StatefulWidget, it immediately calls createState().\n2)mounted == true:\n\tWhen createState creates the state class, a buildContext is assigned to that state.A BuildContext is, overly simplified, the place in the widget tree in which this widget is placed.All widgets have a bool this.mounted property. It is turns true when the buildContext is assigned. It is an error to call setState when a widget is unmounted.\n3)initState():\n\tThis is the first method called when the widget is created (after the class constructor, of course).\ninitState is called once and only once. It must also call super.initState().
\n4)didChangeDependencies():\n\tThe didChangeDependencies method is called immediately after initState on the first time the widget is built.build is always called after didChangeDependencies is called, so this is rarely needed. However, this method is the first change you have to call BuildContext.inheritFromWidgetOfExactType. This essentially would make this State listen to changes on a Widget it is inheriting data from.\n5)build():\n\tbuild() abstract method describes the part of the user interface represented by this widget.\n6)didUpdateWidget():\n\tdidUpdateWidget() is called if the parent widget changes and has to rebuild this widget (because it needs to give it different data), but it is being rebuilt with the same runtimeType, then this method is called.This is because Flutter is re-using the state, which is long lived. In this case, required is to initialize some data again, as one would in initState().\n7)setState():\n\tThe setState() method is called often from the Flutter framework itself and from the developer.It is used to notify the framework that data has changed, and the widget at this build context should be rebuilt.\n8)deactivate():\n\tdeactivate() is called when State is removed from the tree, but it might be reinserted before the current frame change is finished. This method exists basically because State objects can be moved from one point in a tree to another.\n9)dispose():\n\tdispose() is called when the State object is removed, which is permanent.This method is where to unsubscribe and cancel all animations, streams, etc.\n10)mounted == false:\n\tThe state object can never remount, and an error is thrown is setState() is called.</string>





    <string name="data_type_and_how_many_type_of_data_type_in_dart">Q3:What is data type and how many type of data type in Dart?</string>
    <string name="flutter_interview_questions">Flutter Interview Questions</string>
    <string name="what_is_builder_in_flutter">Q24:What is builder in flutter ?</string>
    <string name="how_many_type_of_widget_in_flutter">Q23:How many type of widget in flutter ?</string>
    <string name="what_is_context_in_flutter">Q22:What is context in Flutter ?</string>
    <string name="what_is_push_pop_and_pushnamed">Q21:What is push,pop and pushNamed ?</string>
    <string name="how_to_navigate_one_page_to_another">Q20:How to navigate one page to another ?</string>
    <string name="what_is_purpose_of_key">Q19:What is the purpose of a key in Flutter?</string>
    <string name="what_is_restful_webservices_and_how_we_invoke_it">Q18:What is Restful webServices and how we invoke it ?</string>
    <string name="what_is_sqlite_in_dart">Q17:What is SQLITE ?</string>
    <string name="create_or_run_flutter_app_by_terminal_or_command">Q16:How to create or run flutter app by terminal or command ?</string>
    <string name="what_is_pubspace_yaml">Q15:What is pubspace.yaml ?</string>
    <string name="what_is_shared_preference_in_dart">Q14:What is Shared-preference ?</string>
    <string name="what_is_signed_and_unsigned_apk">Q13:What is signed and unsigned APK ?</string>
    <string name="what_is_build">Q12:What is build ?</string>
    <string name="what_is_initstate_function_and_setstate_function">Q11:What is initState() function and setState() function ?</string>
    <string name="define_the_lifecycle_of_stateful_widget">Q10:Define the lifecycle of Stateful widget?</string>
    <string name="what_is_stateless_and_stateful_widget_in_flutter">Q9:What is stateless and stateful widget in Flutter ?</string>
    <string name="what_is_scaffold">Q8:What is scaffold ?</string>
    <string name="what_is_materialapp_and_why_we_use_in_flutter">Q7:What is MaterialApp and why we use in flutter ?</string>
    <string name="what_is_runapp">Q6:What is runApp() ?</string>
    <string name="what_is_main">Q5:What is main() ?</string>
    <string name="what_is_async_await_future_and_isolate">Q4:What is Async,await,future and Isolate ?</string>
    <string name="which_language_is_used_for_flutter">Q3:Which language is used for flutter ?</string>
    <string name="what_is_flutter">Q2:What is flutter ?</string>
    <string name="difference_between_native_app_development_and_hybrid_app_development">Q1:What is the difference between Native App Development and Hybrid App Development ?</string>

    <string name="kotlin_interview_questions">Kotlin Interview Questions</string>
    <string name="what_do_you_understand_by_the_kotlin_double_bang_operator">Q22:What do you understand by the kotlin double-bang(!!) operator?</string>
    <string name="difference_between_launch_and_async_in_kotlin_coroutines">Q21:What is the difference between Launch and Async in kotlin coroutines?</string>
    <string name="what_are_coroutines_in_kotlin">Q20:What are coroutines in kotlin?</string>
    <string name="difference_between_lateinit_and_lazy_in_kotlin">Q19:What is the difference between lateinit and lazy in kotlin?</string>
    <string name="difference_between_and_operator_in_kotlin">Q18:What is the difference between == and === operator in kotlin?</string>
    <string name="which_are_available_in_kotlin_but_not_in_java">Q17:Name some features which are available in kotlin but not in Java?</string>
    <string name="what_is_the_use_of_companion_objects_in_kotlin">Q16:What is the use of companion Objects in kotlin?</string>
    <string name="how_we_can_convert_a_kotlin_source_file_to_a_java_source_file">Q15:How we can convert a kotlin source file to a Java Source file?</string>
    <string name="what_is_the_use_of_jvmstatic_jvmoverloads_and_jvmfield_in_kotlin">Q14:What is the use of @JVMStatic ,@JVMOverloads and @JVMField in kotlin?</string>
    <string name="what_is_lateinit_in_kotlin_and_when_is_it_used">Q13:What is lateinit in kotlin and when is it used?</string>
    <string name="how_many_type_of_constructor_are_used_in_kotlin">Q12:What is constructor and how many type of constructor are used in kotlin?</string>
    <string name="what_is_the_default_behavior_of_kotlin_classes">Q11:What is the default behavior of kotlin classes?</string>
    <string name="what_is_the_use_of_open_keyword_in_kotlin">Q10:What is the use of open keyword in kotlin?</string>
    <string name="what_is_elvis_operator_in_kotlin">Q9:What is Elvis operator in kotlin?</string>
    <string name="do_you_have_a_ternary_operator_in_kotlin_just_like_java">Q8:Do you have a ternary operator in kotlin just like java?</string>
    <string name="what_is_the_difference_between_safe_calls_and_a_null_check_in_kotlin">Q7:What is the difference between safe calls(?.)and a null check(!!) in kotlin?</string>
    <string name="what_do_you_understand_by_the_range_operator_in_kotlin">Q6:What do you understand by the range operator in kotlin?</string>
    <string name="does_kotlin_provide_support_for_primitive_datatype">Q5:Does kotlin provide support for primitive Datatype?</string>
    <string name="what_is_a_data_class_in_kotlin">Q4:What is a data class in kotlin?</string>
    <string name="what_is_the_difference_between_the_variable_declaration_with_val_and_variable_declaration_with_const">Q3:What is the difference between the variable declaration with val and variable declaration with const?</string>
    <string name="what_is_the_most_important_features_of_kotlin">Q2:What is the most important features of kotlin?</string>
    <string name="what_is_kotlin">Q1:What is kotlin ?</string>
    <string name="interview_questions">Interview Questions</string>
    <string name="q23_what_is_the_difference_between_the_variable_declaration_with_var_and_variable_declaration_with_val">Q23: What is the difference between the variable declaration with var and variable declaration with val?</string>
    <string name="q24_what_are_the_advantages_of_when_over_switch_in_kotlin">Q24:What are the advantages of when over switch in Kotlin?</string>
    <string name="q25_why_is_kotlin_interoperable_with_java">Q25: Why is Kotlin interoperable with Java?</string>
    <string name="q48_what_is_context">Q48: What is context?</string>
    <string name="q47_what_is_ddms">Q47: What is DDMS?</string>
    <string name="q46_what_is_portable_wi_fi_hotspot">Q46:What is portable Wi-Fi hotspot?</string>
    <string name="q45_what_is_an_adapter_in_android">Q45:What is an Adapter in Android?</string>
    <string name="q44_what_is_the_use_of_bundle_in_android">Q44:What is the use of Bundle in Android?</string>
    <string name="q31_what_is_the_purpose_of_the_futurebuilder_widget_in_flutter">Q31:What is the purpose of the FutureBuilder widget in Flutter?</string>
    <string name="q30_what_is_the_purpose_of_the_navigator_widget_in_flutter">Q30:What is the purpose of the Navigator widget in Flutter?</string>
    <string name="q29_what_is_the_purpose_of_the_gesturedetector_widget_in_flutter">Q29:What is the purpose of the GestureDetector widget in Flutter?</string>
    <string name="q28_what_is_the_difference_between_gridview_and_listview_in_flutter">Q28:What is the difference between GridView and ListView in Flutter?</string>
    <string name="q27_what_is_the_purpose_of_the_widget_inspector_in_flutter">Q27:What is the purpose of the Widget Inspector in Flutter?</string>
    <string name="q26_what_is_the_difference_between_push_and_pushreplacement_methods_in_flutter">Q26:What is the difference between push and pushReplacement methods in Flutter?</string>
    <string name="q25_what_is_the_difference_between_materialapp_and_widgetsapp_in_flutter">Q25:What is the difference between MaterialApp and WidgetsApp in Flutter?</string>
    <string name="q32_what_is_the_difference_between_hot_restart_and_hot_reload">Q32:What is the difference between Hot Restart and Hot Reload?</string>
    <string name="q34_what_are_null_aware_operators">Q34:What are Null-aware operators?</string>
    <string name="q33_why_do_we_need_mixins">Q33:Why do we need mixins?</string>
    <string name="q20_what_is_broadcast_receiver_in_android">Q20:What is Broadcast Receiver in android?</string>
    <string name="q31_describe_mvvm">Q31: Describe MVVM?</string>


</resources>